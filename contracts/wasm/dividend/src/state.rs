// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableAddress {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableAddress {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_address(&self, index: u32) -> ScImmutableAddress {
        ScImmutableAddress::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MapAddressToImmutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapAddressToImmutableUint64 {
    pub fn get_uint64(&self, key: &ScAddress) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.key(&address_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ImmutableDividendState {
	pub(crate) proxy: Proxy,
}

impl ImmutableDividendState {
    // array with all the recipients of this dividend
    pub fn member_list(&self) -> ArrayOfImmutableAddress {
		ArrayOfImmutableAddress { proxy: self.proxy.root(STATE_MEMBER_LIST) }
	}

    // map with all the recipient factors of this dividend
    pub fn members(&self) -> MapAddressToImmutableUint64 {
		MapAddressToImmutableUint64 { proxy: self.proxy.root(STATE_MEMBERS) }
	}

    // owner of contract, the only one who can call 'member' func
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    // sum of all recipient factors
    pub fn total_factor(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(STATE_TOTAL_FACTOR))
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableAddress {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableAddress {
	pub fn append_address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_address(&self, index: u32) -> ScMutableAddress {
        ScMutableAddress::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MapAddressToMutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapAddressToMutableUint64 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_uint64(&self, key: &ScAddress) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.key(&address_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MutableDividendState {
	pub(crate) proxy: Proxy,
}

impl MutableDividendState {
    pub fn as_immutable(&self) -> ImmutableDividendState {
		ImmutableDividendState { proxy: self.proxy.root("") }
	}

    // array with all the recipients of this dividend
    pub fn member_list(&self) -> ArrayOfMutableAddress {
		ArrayOfMutableAddress { proxy: self.proxy.root(STATE_MEMBER_LIST) }
	}

    // map with all the recipient factors of this dividend
    pub fn members(&self) -> MapAddressToMutableUint64 {
		MapAddressToMutableUint64 { proxy: self.proxy.root(STATE_MEMBERS) }
	}

    // owner of contract, the only one who can call 'member' func
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    // sum of all recipient factors
    pub fn total_factor(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(STATE_TOTAL_FACTOR))
	}
}
