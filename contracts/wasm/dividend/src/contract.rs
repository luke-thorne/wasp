// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use crate::*;

pub struct DivideCall {
	pub func: ScFunc,
}

pub struct InitCall {
	pub func: ScInitFunc,
	pub params: MutableInitParams,
}

pub struct MemberCall {
	pub func: ScFunc,
	pub params: MutableMemberParams,
}

pub struct SetOwnerCall {
	pub func: ScFunc,
	pub params: MutableSetOwnerParams,
}

pub struct GetFactorCall {
	pub func: ScView,
	pub params: MutableGetFactorParams,
	pub results: ImmutableGetFactorResults,
}

pub struct GetOwnerCall {
	pub func: ScView,
	pub results: ImmutableGetOwnerResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    // divide tokens over members
    pub fn divide(_ctx: &dyn ScFuncCallContext) -> DivideCall {
        DivideCall {
            func: ScFunc::new(HSC_NAME, HFUNC_DIVIDE),
        }
    }

    pub fn init(_ctx: &dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func: ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { proxy: Proxy::nil() },
        };
        ScInitFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn member(_ctx: &dyn ScFuncCallContext) -> MemberCall {
        let mut f = MemberCall {
            func: ScFunc::new(HSC_NAME, HFUNC_MEMBER),
            params: MutableMemberParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_owner(_ctx: &dyn ScFuncCallContext) -> SetOwnerCall {
        let mut f = SetOwnerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_OWNER),
            params: MutableSetOwnerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn get_factor(_ctx: &dyn ScViewCallContext) -> GetFactorCall {
        let mut f = GetFactorCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_FACTOR),
            params: MutableGetFactorParams { proxy: Proxy::nil() },
            results: ImmutableGetFactorResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_owner(_ctx: &dyn ScViewCallContext) -> GetOwnerCall {
        let mut f = GetOwnerCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_OWNER),
            results: ImmutableGetOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
