// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableIncrementWithDelayParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableIncrementWithDelayParams {
    // delay in seconds
    pub fn delay(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_DELAY))
	}
}

#[derive(Clone)]
pub struct MutableIncrementWithDelayParams {
	pub(crate) proxy: Proxy,
}

impl MutableIncrementWithDelayParams {
    // delay in seconds
    pub fn delay(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_DELAY))
	}
}

#[derive(Clone)]
pub struct ImmutableInitParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    // value to initialize state counter with
    pub fn counter(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_COUNTER))
	}
}

#[derive(Clone)]
pub struct MutableInitParams {
	pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    // value to initialize state counter with
    pub fn counter(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_COUNTER))
	}
}

#[derive(Clone)]
pub struct ImmutableRepeatManyParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableRepeatManyParams {
    // number of times to recursively call myself
    pub fn num_repeats(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_NUM_REPEATS))
	}
}

#[derive(Clone)]
pub struct MutableRepeatManyParams {
	pub(crate) proxy: Proxy,
}

impl MutableRepeatManyParams {
    // number of times to recursively call myself
    pub fn num_repeats(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_NUM_REPEATS))
	}
}

#[derive(Clone)]
pub struct ImmutableWhenMustIncrementParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableWhenMustIncrementParams {
    // dummy param to prevent 'duplicate outputs not allowed'
    pub fn dummy(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_DUMMY))
	}
}

#[derive(Clone)]
pub struct MutableWhenMustIncrementParams {
	pub(crate) proxy: Proxy,
}

impl MutableWhenMustIncrementParams {
    // dummy param to prevent 'duplicate outputs not allowed'
    pub fn dummy(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_DUMMY))
	}
}

#[derive(Clone)]
pub struct ImmutableGetVliParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetVliParams {
    pub fn ni64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_NI64))
	}
}

#[derive(Clone)]
pub struct MutableGetVliParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetVliParams {
    pub fn ni64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_NI64))
	}
}

#[derive(Clone)]
pub struct ImmutableGetVluParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetVluParams {
    pub fn nu64(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_NU64))
	}
}

#[derive(Clone)]
pub struct MutableGetVluParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetVluParams {
    pub fn nu64(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_NU64))
	}
}
