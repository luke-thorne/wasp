// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:revive
package inccounter

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type ImmutableIncrementWithDelayParams struct {
	proxy wasmtypes.Proxy
}

// delay in seconds
func (s ImmutableIncrementWithDelayParams) Delay() wasmtypes.ScImmutableUint32 {
	return wasmtypes.NewScImmutableUint32(s.proxy.Root(ParamDelay))
}

type MutableIncrementWithDelayParams struct {
	proxy wasmtypes.Proxy
}

// delay in seconds
func (s MutableIncrementWithDelayParams) Delay() wasmtypes.ScMutableUint32 {
	return wasmtypes.NewScMutableUint32(s.proxy.Root(ParamDelay))
}

type ImmutableInitParams struct {
	proxy wasmtypes.Proxy
}

// value to initialize state counter with
func (s ImmutableInitParams) Counter() wasmtypes.ScImmutableInt64 {
	return wasmtypes.NewScImmutableInt64(s.proxy.Root(ParamCounter))
}

type MutableInitParams struct {
	proxy wasmtypes.Proxy
}

// value to initialize state counter with
func (s MutableInitParams) Counter() wasmtypes.ScMutableInt64 {
	return wasmtypes.NewScMutableInt64(s.proxy.Root(ParamCounter))
}

type ImmutableRepeatManyParams struct {
	proxy wasmtypes.Proxy
}

// number of times to recursively call myself
func (s ImmutableRepeatManyParams) NumRepeats() wasmtypes.ScImmutableInt64 {
	return wasmtypes.NewScImmutableInt64(s.proxy.Root(ParamNumRepeats))
}

type MutableRepeatManyParams struct {
	proxy wasmtypes.Proxy
}

// number of times to recursively call myself
func (s MutableRepeatManyParams) NumRepeats() wasmtypes.ScMutableInt64 {
	return wasmtypes.NewScMutableInt64(s.proxy.Root(ParamNumRepeats))
}

type ImmutableWhenMustIncrementParams struct {
	proxy wasmtypes.Proxy
}

// dummy param to prevent 'duplicate outputs not allowed'
func (s ImmutableWhenMustIncrementParams) Dummy() wasmtypes.ScImmutableInt64 {
	return wasmtypes.NewScImmutableInt64(s.proxy.Root(ParamDummy))
}

type MutableWhenMustIncrementParams struct {
	proxy wasmtypes.Proxy
}

// dummy param to prevent 'duplicate outputs not allowed'
func (s MutableWhenMustIncrementParams) Dummy() wasmtypes.ScMutableInt64 {
	return wasmtypes.NewScMutableInt64(s.proxy.Root(ParamDummy))
}

type ImmutableGetVliParams struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetVliParams) Ni64() wasmtypes.ScImmutableInt64 {
	return wasmtypes.NewScImmutableInt64(s.proxy.Root(ParamNi64))
}

type MutableGetVliParams struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetVliParams) Ni64() wasmtypes.ScMutableInt64 {
	return wasmtypes.NewScMutableInt64(s.proxy.Root(ParamNi64))
}

type ImmutableGetVluParams struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetVluParams) Nu64() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(ParamNu64))
}

type MutableGetVluParams struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetVluParams) Nu64() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(ParamNu64))
}
