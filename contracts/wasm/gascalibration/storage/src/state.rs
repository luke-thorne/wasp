// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableUint32 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableUint32 {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_uint32(&self, index: u32) -> ScImmutableUint32 {
        ScImmutableUint32::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ImmutablestorageState {
	pub(crate) proxy: Proxy,
}

impl ImmutablestorageState {
    pub fn v(&self) -> ArrayOfImmutableUint32 {
		ArrayOfImmutableUint32 { proxy: self.proxy.root(STATE_V) }
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableUint32 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableUint32 {
	pub fn append_uint32(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_uint32(&self, index: u32) -> ScMutableUint32 {
        ScMutableUint32::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MutablestorageState {
	pub(crate) proxy: Proxy,
}

impl MutablestorageState {
    pub fn as_immutable(&self) -> ImmutablestorageState {
		ImmutablestorageState { proxy: self.proxy.root("") }
	}

    pub fn v(&self) -> ArrayOfMutableUint32 {
		ArrayOfMutableUint32 { proxy: self.proxy.root(STATE_V) }
	}
}
