// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package storage

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type ArrayOfImmutableUint32 struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfImmutableUint32) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfImmutableUint32) GetUint32(index uint32) wasmtypes.ScImmutableUint32 {
	return wasmtypes.NewScImmutableUint32(a.proxy.Index(index))
}

type ImmutablestorageState struct {
	proxy wasmtypes.Proxy
}

func (s ImmutablestorageState) V() ArrayOfImmutableUint32 {
	return ArrayOfImmutableUint32{proxy: s.proxy.Root(StateV)}
}

type ArrayOfMutableUint32 struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfMutableUint32) AppendUint32() wasmtypes.ScMutableUint32 {
	return wasmtypes.NewScMutableUint32(a.proxy.Append())
}

func (a ArrayOfMutableUint32) Clear() {
	a.proxy.ClearArray()
}

func (a ArrayOfMutableUint32) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfMutableUint32) GetUint32(index uint32) wasmtypes.ScMutableUint32 {
	return wasmtypes.NewScMutableUint32(a.proxy.Index(index))
}

type MutablestorageState struct {
	proxy wasmtypes.Proxy
}

func (s MutablestorageState) AsImmutable() ImmutablestorageState {
	return ImmutablestorageState(s)
}

func (s MutablestorageState) V() ArrayOfMutableUint32 {
	return ArrayOfMutableUint32{proxy: s.proxy.Root(StateV)}
}
