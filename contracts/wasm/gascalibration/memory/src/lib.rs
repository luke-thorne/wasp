// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use memory::*;
use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::state::*;

mod consts;
mod contract;
mod params;
mod state;

mod memory;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
    	FUNC_F,
	],
    funcs: &[
    	func_f_thunk,
	],
    views: &[
	],
};

#[no_mangle]
fn on_call(index: i32) {
	ScExports::call(index, &EXPORT_MAP);
}

#[no_mangle]
fn on_load() {
    ScExports::export(&EXPORT_MAP);
}

pub struct FContext {
	params: ImmutableFParams,
	state: MutablememoryState,
}

fn func_f_thunk(ctx: &ScFuncContext) {
	ctx.log("memory.funcF");
	let f = FContext {
		params: ImmutableFParams { proxy: params_proxy() },
		state: MutablememoryState { proxy: state_proxy() },
	};
	ctx.require(f.params.n().exists(), "missing mandatory n");
	func_f(ctx, &f);
	ctx.log("memory.funcF ok");
}
