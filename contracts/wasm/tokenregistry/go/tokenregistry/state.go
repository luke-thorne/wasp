// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package tokenregistry

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type MapTokenIDToImmutableToken struct {
	proxy wasmtypes.Proxy
}

func (m MapTokenIDToImmutableToken) GetToken(key wasmtypes.ScTokenID) ImmutableToken {
	return ImmutableToken{proxy: m.proxy.Key(wasmtypes.TokenIDToBytes(key))}
}

type ArrayOfImmutableTokenID struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfImmutableTokenID) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfImmutableTokenID) GetTokenID(index uint32) wasmtypes.ScImmutableTokenID {
	return wasmtypes.NewScImmutableTokenID(a.proxy.Index(index))
}

type ImmutableTokenRegistryState struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableTokenRegistryState) Registry() MapTokenIDToImmutableToken {
	return MapTokenIDToImmutableToken{proxy: s.proxy.Root(StateRegistry)}
}

func (s ImmutableTokenRegistryState) TokenList() ArrayOfImmutableTokenID {
	return ArrayOfImmutableTokenID{proxy: s.proxy.Root(StateTokenList)}
}

type MapTokenIDToMutableToken struct {
	proxy wasmtypes.Proxy
}

func (m MapTokenIDToMutableToken) Clear() {
	m.proxy.ClearMap()
}

func (m MapTokenIDToMutableToken) GetToken(key wasmtypes.ScTokenID) MutableToken {
	return MutableToken{proxy: m.proxy.Key(wasmtypes.TokenIDToBytes(key))}
}

type ArrayOfMutableTokenID struct {
	proxy wasmtypes.Proxy
}

func (a ArrayOfMutableTokenID) AppendTokenID() wasmtypes.ScMutableTokenID {
	return wasmtypes.NewScMutableTokenID(a.proxy.Append())
}

func (a ArrayOfMutableTokenID) Clear() {
	a.proxy.ClearArray()
}

func (a ArrayOfMutableTokenID) Length() uint32 {
	return a.proxy.Length()
}

func (a ArrayOfMutableTokenID) GetTokenID(index uint32) wasmtypes.ScMutableTokenID {
	return wasmtypes.NewScMutableTokenID(a.proxy.Index(index))
}

type MutableTokenRegistryState struct {
	proxy wasmtypes.Proxy
}

func (s MutableTokenRegistryState) AsImmutable() ImmutableTokenRegistryState {
	return ImmutableTokenRegistryState(s)
}

func (s MutableTokenRegistryState) Registry() MapTokenIDToMutableToken {
	return MapTokenIDToMutableToken{proxy: s.proxy.Root(StateRegistry)}
}

func (s MutableTokenRegistryState) TokenList() ArrayOfMutableTokenID {
	return ArrayOfMutableTokenID{proxy: s.proxy.Root(StateTokenList)}
}
