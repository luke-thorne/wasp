// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

const exportMap: wasmlib.ScExportMap = {
	names: [
		sc.FuncMintSupply,
		sc.FuncTransferOwnership,
		sc.FuncUpdateMetadata,
		sc.ViewGetInfo,
	],
	funcs: [
		funcMintSupplyThunk,
		funcTransferOwnershipThunk,
		funcUpdateMetadataThunk,
	],
	views: [
		viewGetInfoThunk,
	],
};

export function on_call(index: i32): void {
	wasmlib.WasmVMHost.connect();
	wasmlib.ScExports.call(index, exportMap);
}

export function on_load(): void {
	wasmlib.WasmVMHost.connect();
	wasmlib.ScExports.export(exportMap);
}

function funcMintSupplyThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("tokenregistry.funcMintSupply");
	let f = new sc.MintSupplyContext();
	sc.funcMintSupply(ctx, f);
	ctx.log("tokenregistry.funcMintSupply ok");
}

function funcTransferOwnershipThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("tokenregistry.funcTransferOwnership");
	let f = new sc.TransferOwnershipContext();

	// TODO the one who can transfer token ownership
	ctx.require(ctx.caller().equals(ctx.contractCreator()), "no permission");

	ctx.require(f.params.token().exists(), "missing mandatory token");
	sc.funcTransferOwnership(ctx, f);
	ctx.log("tokenregistry.funcTransferOwnership ok");
}

function funcUpdateMetadataThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("tokenregistry.funcUpdateMetadata");
	let f = new sc.UpdateMetadataContext();

	// TODO the one who can change the token info
	ctx.require(ctx.caller().equals(ctx.contractCreator()), "no permission");

	ctx.require(f.params.token().exists(), "missing mandatory token");
	sc.funcUpdateMetadata(ctx, f);
	ctx.log("tokenregistry.funcUpdateMetadata ok");
}

function viewGetInfoThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("tokenregistry.viewGetInfo");
	let f = new sc.GetInfoContext();
	ctx.require(f.params.token().exists(), "missing mandatory token");
	sc.viewGetInfo(ctx, f);
	ctx.log("tokenregistry.viewGetInfo ok");
}
