// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmtypes from "wasmlib/wasmtypes";
import * as sc from "./index";

export class MapTokenIDToImmutableToken extends wasmtypes.ScProxy {

	getToken(key: wasmtypes.ScTokenID): sc.ImmutableToken {
		return new sc.ImmutableToken(this.proxy.key(wasmtypes.tokenIDToBytes(key)));
	}
}

export class ArrayOfImmutableTokenID extends wasmtypes.ScProxy {

	length(): u32 {
		return this.proxy.length();
	}

	getTokenID(index: u32): wasmtypes.ScImmutableTokenID {
		return new wasmtypes.ScImmutableTokenID(this.proxy.index(index));
	}
}

export class ImmutableTokenRegistryState extends wasmtypes.ScProxy {
	owner(): wasmtypes.ScImmutableAgentID {
		return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.StateOwner));
	}

	registry(): sc.MapTokenIDToImmutableToken {
		return new sc.MapTokenIDToImmutableToken(this.proxy.root(sc.StateRegistry));
	}

	tokenList(): sc.ArrayOfImmutableTokenID {
		return new sc.ArrayOfImmutableTokenID(this.proxy.root(sc.StateTokenList));
	}
}

export class MapTokenIDToMutableToken extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getToken(key: wasmtypes.ScTokenID): sc.MutableToken {
		return new sc.MutableToken(this.proxy.key(wasmtypes.tokenIDToBytes(key)));
	}
}

export class ArrayOfMutableTokenID extends wasmtypes.ScProxy {

	appendTokenID(): wasmtypes.ScMutableTokenID {
		return new wasmtypes.ScMutableTokenID(this.proxy.append());
	}

	clear(): void {
		this.proxy.clearArray();
	}

	length(): u32 {
		return this.proxy.length();
	}

	getTokenID(index: u32): wasmtypes.ScMutableTokenID {
		return new wasmtypes.ScMutableTokenID(this.proxy.index(index));
	}
}

export class MutableTokenRegistryState extends wasmtypes.ScProxy {
	asImmutable(): sc.ImmutableTokenRegistryState {
		return new sc.ImmutableTokenRegistryState(this.proxy);
	}

	owner(): wasmtypes.ScMutableAgentID {
		return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.StateOwner));
	}

	registry(): sc.MapTokenIDToMutableToken {
		return new sc.MapTokenIDToMutableToken(this.proxy.root(sc.StateRegistry));
	}

	tokenList(): sc.ArrayOfMutableTokenID {
		return new sc.ArrayOfMutableTokenID(this.proxy.root(sc.StateTokenList));
	}
}
