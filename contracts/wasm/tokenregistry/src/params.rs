// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableMintSupplyParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableMintSupplyParams {
    // description what minted token represents
    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    // any user defined text
    pub fn user_defined(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_USER_DEFINED))
	}
}

#[derive(Clone)]
pub struct MutableMintSupplyParams {
	pub(crate) proxy: Proxy,
}

impl MutableMintSupplyParams {
    // description what minted token represents
    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_DESCRIPTION))
	}

    // any user defined text
    pub fn user_defined(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_USER_DEFINED))
	}
}

#[derive(Clone)]
pub struct ImmutableTransferOwnershipParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableTransferOwnershipParams {
    // token of token to transfer ownership of
    pub fn token(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct MutableTransferOwnershipParams {
	pub(crate) proxy: Proxy,
}

impl MutableTransferOwnershipParams {
    // token of token to transfer ownership of
    pub fn token(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct ImmutableUpdateMetadataParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableUpdateMetadataParams {
    // token of token to update metadata for
    pub fn token(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct MutableUpdateMetadataParams {
	pub(crate) proxy: Proxy,
}

impl MutableUpdateMetadataParams {
    // token of token to update metadata for
    pub fn token(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct ImmutableGetInfoParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetInfoParams {
    // token of token to view registry info of
    pub fn token(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}

#[derive(Clone)]
pub struct MutableGetInfoParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetInfoParams {
    // token of token to view registry info of
    pub fn token(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN))
	}
}
