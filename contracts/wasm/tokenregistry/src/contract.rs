// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use crate::*;

pub struct MintSupplyCall {
	pub func: ScFunc,
	pub params: MutableMintSupplyParams,
}

pub struct TransferOwnershipCall {
	pub func: ScFunc,
	pub params: MutableTransferOwnershipParams,
}

pub struct UpdateMetadataCall {
	pub func: ScFunc,
	pub params: MutableUpdateMetadataParams,
}

pub struct GetInfoCall {
	pub func: ScView,
	pub params: MutableGetInfoParams,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn mint_supply(_ctx: &dyn ScFuncCallContext) -> MintSupplyCall {
        let mut f = MintSupplyCall {
            func: ScFunc::new(HSC_NAME, HFUNC_MINT_SUPPLY),
            params: MutableMintSupplyParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn transfer_ownership(_ctx: &dyn ScFuncCallContext) -> TransferOwnershipCall {
        let mut f = TransferOwnershipCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TRANSFER_OWNERSHIP),
            params: MutableTransferOwnershipParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn update_metadata(_ctx: &dyn ScFuncCallContext) -> UpdateMetadataCall {
        let mut f = UpdateMetadataCall {
            func: ScFunc::new(HSC_NAME, HFUNC_UPDATE_METADATA),
            params: MutableUpdateMetadataParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn get_info(_ctx: &dyn ScViewCallContext) -> GetInfoCall {
        let mut f = GetInfoCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_INFO),
            params: MutableGetInfoParams { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        f
    }
}
