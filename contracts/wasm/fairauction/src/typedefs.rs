// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableAgentID {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableAgentID {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_agent_id(&self, index: u32) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.index(index))
    }
}

pub type ImmutableBidderList = ArrayOfImmutableAgentID;

#[derive(Clone)]
pub struct ArrayOfMutableAgentID {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableAgentID {
	pub fn append_agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_agent_id(&self, index: u32) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.index(index))
    }
}

pub type MutableBidderList = ArrayOfMutableAgentID;

#[derive(Clone)]
pub struct MapAgentIDToImmutableBid {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToImmutableBid {
    pub fn get_bid(&self, key: &ScAgentID) -> ImmutableBid {
        ImmutableBid { proxy: self.proxy.key(&agent_id_to_bytes(key)) }
    }
}

pub type ImmutableBids = MapAgentIDToImmutableBid;

#[derive(Clone)]
pub struct MapAgentIDToMutableBid {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToMutableBid {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bid(&self, key: &ScAgentID) -> MutableBid {
        MutableBid { proxy: self.proxy.key(&agent_id_to_bytes(key)) }
    }
}

pub type MutableBids = MapAgentIDToMutableBid;
