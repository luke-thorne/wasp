// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package fairauction

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type Auction struct {
	// issuer of start_auction transaction
	Creator wasmtypes.ScAgentID
	// deposit by auction owner to cover the SC fees
	Deposit uint64
	// auction description
	Description string
	// auction duration in minutes
	Duration uint32
	// the current highest bid amount
	HighestBid uint64
	// the current highest bidder
	HighestBidder wasmtypes.ScAgentID
	// minimum bid amount
	MinimumBid uint64
	// NFT of NFTs for sale
	Nft wasmtypes.ScNftID
	// auction owner's margin in promilles
	OwnerMargin uint64
	// timestamp when auction started
	WhenStarted uint64
}

func NewAuctionFromBytes(buf []byte) *Auction {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Auction{}
	data.Creator = wasmtypes.AgentIDDecode(dec)
	data.Deposit = wasmtypes.Uint64Decode(dec)
	data.Description = wasmtypes.StringDecode(dec)
	data.Duration = wasmtypes.Uint32Decode(dec)
	data.HighestBid = wasmtypes.Uint64Decode(dec)
	data.HighestBidder = wasmtypes.AgentIDDecode(dec)
	data.MinimumBid = wasmtypes.Uint64Decode(dec)
	data.Nft = wasmtypes.NftIDDecode(dec)
	data.OwnerMargin = wasmtypes.Uint64Decode(dec)
	data.WhenStarted = wasmtypes.Uint64Decode(dec)
	dec.Close()
	return data
}

func (o *Auction) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.AgentIDEncode(enc, o.Creator)
	wasmtypes.Uint64Encode(enc, o.Deposit)
	wasmtypes.StringEncode(enc, o.Description)
	wasmtypes.Uint32Encode(enc, o.Duration)
	wasmtypes.Uint64Encode(enc, o.HighestBid)
	wasmtypes.AgentIDEncode(enc, o.HighestBidder)
	wasmtypes.Uint64Encode(enc, o.MinimumBid)
	wasmtypes.NftIDEncode(enc, o.Nft)
	wasmtypes.Uint64Encode(enc, o.OwnerMargin)
	wasmtypes.Uint64Encode(enc, o.WhenStarted)
	return enc.Buf()
}

type ImmutableAuction struct {
	proxy wasmtypes.Proxy
}

func (o ImmutableAuction) Exists() bool {
	return o.proxy.Exists()
}

func (o ImmutableAuction) Value() *Auction {
	return NewAuctionFromBytes(o.proxy.Get())
}

type MutableAuction struct {
	proxy wasmtypes.Proxy
}

func (o MutableAuction) Delete() {
	o.proxy.Delete()
}

func (o MutableAuction) Exists() bool {
	return o.proxy.Exists()
}

func (o MutableAuction) SetValue(value *Auction) {
	o.proxy.Set(value.Bytes())
}

func (o MutableAuction) Value() *Auction {
	return NewAuctionFromBytes(o.proxy.Get())
}

type Bid struct {
	// cumulative amount of bids from same bidder
	Amount uint64
	// index of bidder in bidder list
	Index uint32
	// timestamp of most recent bid
	Timestamp uint64
}

func NewBidFromBytes(buf []byte) *Bid {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &Bid{}
	data.Amount = wasmtypes.Uint64Decode(dec)
	data.Index = wasmtypes.Uint32Decode(dec)
	data.Timestamp = wasmtypes.Uint64Decode(dec)
	dec.Close()
	return data
}

func (o *Bid) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.Uint64Encode(enc, o.Amount)
	wasmtypes.Uint32Encode(enc, o.Index)
	wasmtypes.Uint64Encode(enc, o.Timestamp)
	return enc.Buf()
}

type ImmutableBid struct {
	proxy wasmtypes.Proxy
}

func (o ImmutableBid) Exists() bool {
	return o.proxy.Exists()
}

func (o ImmutableBid) Value() *Bid {
	return NewBidFromBytes(o.proxy.Get())
}

type MutableBid struct {
	proxy wasmtypes.Proxy
}

func (o MutableBid) Delete() {
	o.proxy.Delete()
}

func (o MutableBid) Exists() bool {
	return o.proxy.Exists()
}

func (o MutableBid) SetValue(value *Bid) {
	o.proxy.Set(value.Bytes())
}

func (o MutableBid) Value() *Bid {
	return NewBidFromBytes(o.proxy.Get())
}
