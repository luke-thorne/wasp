// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableCallOnChainParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCallOnChainParams {
    pub fn hname_contract(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME_CONTRACT))
	}

    pub fn hname_ep(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME_EP))
	}

    pub fn n(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct MutableCallOnChainParams {
	pub(crate) proxy: Proxy,
}

impl MutableCallOnChainParams {
    pub fn hname_contract(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME_CONTRACT))
	}

    pub fn hname_ep(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME_EP))
	}

    pub fn n(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckContextFromFullEPParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckContextFromFullEPParams {
    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn caller(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CALLER))
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn chain_owner_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER_ID))
	}
}

#[derive(Clone)]
pub struct MutableCheckContextFromFullEPParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckContextFromFullEPParams {
    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn caller(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CALLER))
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn chain_owner_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableInitParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    pub fn fail(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_FAIL))
	}
}

#[derive(Clone)]
pub struct MutableInitParams {
	pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    pub fn fail(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_FAIL))
	}
}

#[derive(Clone)]
pub struct ImmutablePassTypesFullParams {
	pub(crate) proxy: Proxy,
}

impl ImmutablePassTypesFullParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn contract_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CONTRACT_ID))
	}

    pub fn hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_HASH))
	}

    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn hname_zero(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME_ZERO))
	}

    pub fn int64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_INT64))
	}

    pub fn int64_zero(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_INT64_ZERO))
	}

    pub fn string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_STRING))
	}

    pub fn string_zero(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_STRING_ZERO))
	}
}

#[derive(Clone)]
pub struct MutablePassTypesFullParams {
	pub(crate) proxy: Proxy,
}

impl MutablePassTypesFullParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn contract_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CONTRACT_ID))
	}

    pub fn hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_HASH))
	}

    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn hname_zero(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME_ZERO))
	}

    pub fn int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_INT64))
	}

    pub fn int64_zero(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_INT64_ZERO))
	}

    pub fn string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_STRING))
	}

    pub fn string_zero(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_STRING_ZERO))
	}
}

#[derive(Clone)]
pub struct ImmutableRunRecursionParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableRunRecursionParams {
    pub fn n(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct MutableRunRecursionParams {
	pub(crate) proxy: Proxy,
}

impl MutableRunRecursionParams {
    pub fn n(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct ImmutableSetIntParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetIntParams {
    pub fn int_value(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_INT_VALUE))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableSetIntParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetIntParams {
    pub fn int_value(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_INT_VALUE))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutableSpawnParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSpawnParams {
    pub fn prog_hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_PROG_HASH))
	}
}

#[derive(Clone)]
pub struct MutableSpawnParams {
	pub(crate) proxy: Proxy,
}

impl MutableSpawnParams {
    pub fn prog_hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_PROG_HASH))
	}
}

#[derive(Clone)]
pub struct ImmutableTestEventLogGenericDataParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableTestEventLogGenericDataParams {
    pub fn counter(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_COUNTER))
	}
}

#[derive(Clone)]
pub struct MutableTestEventLogGenericDataParams {
	pub(crate) proxy: Proxy,
}

impl MutableTestEventLogGenericDataParams {
    pub fn counter(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_COUNTER))
	}
}

#[derive(Clone)]
pub struct ImmutableWithdrawFromChainParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableWithdrawFromChainParams {
    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn gas_budget(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_GAS_BUDGET))
	}

    pub fn iotas_withdrawal(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_IOTAS_WITHDRAWAL))
	}
}

#[derive(Clone)]
pub struct MutableWithdrawFromChainParams {
	pub(crate) proxy: Proxy,
}

impl MutableWithdrawFromChainParams {
    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn gas_budget(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_GAS_BUDGET))
	}

    pub fn iotas_withdrawal(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_IOTAS_WITHDRAWAL))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckContextFromViewEPParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckContextFromViewEPParams {
    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn chain_owner_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER_ID))
	}
}

#[derive(Clone)]
pub struct MutableCheckContextFromViewEPParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckContextFromViewEPParams {
    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn chain_owner_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableFibonacciParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableFibonacciParams {
    pub fn n(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct MutableFibonacciParams {
	pub(crate) proxy: Proxy,
}

impl MutableFibonacciParams {
    pub fn n(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct ImmutableFibonacciIndirectParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableFibonacciIndirectParams {
    pub fn n(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct MutableFibonacciIndirectParams {
	pub(crate) proxy: Proxy,
}

impl MutableFibonacciIndirectParams {
    pub fn n(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_N))
	}
}

#[derive(Clone)]
pub struct ImmutableGetIntParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetIntParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableGetIntParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetIntParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutableGetStringValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetStringValueParams {
    pub fn var_name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_VAR_NAME))
	}
}

#[derive(Clone)]
pub struct MutableGetStringValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetStringValueParams {
    pub fn var_name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_VAR_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutablePassTypesViewParams {
	pub(crate) proxy: Proxy,
}

impl ImmutablePassTypesViewParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn contract_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CONTRACT_ID))
	}

    pub fn hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_HASH))
	}

    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn hname_zero(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME_ZERO))
	}

    pub fn int64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_INT64))
	}

    pub fn int64_zero(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_INT64_ZERO))
	}

    pub fn string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_STRING))
	}

    pub fn string_zero(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_STRING_ZERO))
	}
}

#[derive(Clone)]
pub struct MutablePassTypesViewParams {
	pub(crate) proxy: Proxy,
}

impl MutablePassTypesViewParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn contract_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CONTRACT_ID))
	}

    pub fn hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_HASH))
	}

    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn hname_zero(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME_ZERO))
	}

    pub fn int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_INT64))
	}

    pub fn int64_zero(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_INT64_ZERO))
	}

    pub fn string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_STRING))
	}

    pub fn string_zero(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_STRING_ZERO))
	}
}
