// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableBet {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableBet {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_bet(&self, index: u32) -> ImmutableBet {
		ImmutableBet { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct ImmutableFairRouletteState {
	pub(crate) proxy: Proxy,
}

impl ImmutableFairRouletteState {
    pub fn bets(&self) -> ArrayOfImmutableBet {
		ArrayOfImmutableBet { proxy: self.proxy.root(STATE_BETS) }
	}

    pub fn last_winning_number(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.proxy.root(STATE_LAST_WINNING_NUMBER))
	}

    pub fn play_period(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(STATE_PLAY_PERIOD))
	}

    pub fn round_number(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(STATE_ROUND_NUMBER))
	}

    pub fn round_started_at(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(STATE_ROUND_STARTED_AT))
	}

    pub fn round_status(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.proxy.root(STATE_ROUND_STATUS))
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableBet {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableBet {

	pub fn append_bet(&self) -> MutableBet {
		MutableBet { proxy: self.proxy.append() }
	}
	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_bet(&self, index: u32) -> MutableBet {
		MutableBet { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct MutableFairRouletteState {
	pub(crate) proxy: Proxy,
}

impl MutableFairRouletteState {
    pub fn as_immutable(&self) -> ImmutableFairRouletteState {
		ImmutableFairRouletteState { proxy: self.proxy.root("") }
	}

    pub fn bets(&self) -> ArrayOfMutableBet {
		ArrayOfMutableBet { proxy: self.proxy.root(STATE_BETS) }
	}

    pub fn last_winning_number(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.proxy.root(STATE_LAST_WINNING_NUMBER))
	}

    pub fn play_period(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(STATE_PLAY_PERIOD))
	}

    pub fn round_number(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(STATE_ROUND_NUMBER))
	}

    pub fn round_started_at(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(STATE_ROUND_STARTED_AT))
	}

    pub fn round_status(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.proxy.root(STATE_ROUND_STATUS))
	}
}
