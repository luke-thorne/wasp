// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableLastWinningNumberResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableLastWinningNumberResults {
    pub fn last_winning_number(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.proxy.root(RESULT_LAST_WINNING_NUMBER))
	}
}

#[derive(Clone)]
pub struct MutableLastWinningNumberResults {
	pub(crate) proxy: Proxy,
}

impl MutableLastWinningNumberResults {
    pub fn last_winning_number(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.proxy.root(RESULT_LAST_WINNING_NUMBER))
	}
}

#[derive(Clone)]
pub struct ImmutableRoundNumberResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableRoundNumberResults {
    pub fn round_number(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_ROUND_NUMBER))
	}
}

#[derive(Clone)]
pub struct MutableRoundNumberResults {
	pub(crate) proxy: Proxy,
}

impl MutableRoundNumberResults {
    pub fn round_number(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_ROUND_NUMBER))
	}
}

#[derive(Clone)]
pub struct ImmutableRoundStartedAtResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableRoundStartedAtResults {
    pub fn round_started_at(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_ROUND_STARTED_AT))
	}
}

#[derive(Clone)]
pub struct MutableRoundStartedAtResults {
	pub(crate) proxy: Proxy,
}

impl MutableRoundStartedAtResults {
    pub fn round_started_at(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_ROUND_STARTED_AT))
	}
}

#[derive(Clone)]
pub struct ImmutableRoundStatusResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableRoundStatusResults {
    pub fn round_status(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.proxy.root(RESULT_ROUND_STATUS))
	}
}

#[derive(Clone)]
pub struct MutableRoundStatusResults {
	pub(crate) proxy: Proxy,
}

impl MutableRoundStatusResults {
    pub fn round_status(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.proxy.root(RESULT_ROUND_STATUS))
	}
}
