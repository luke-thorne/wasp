// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ForcePayoutCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncForcePayout);
	}
}

export class ForcePayoutContext {
	events: sc.FairRouletteEvents = new sc.FairRouletteEvents();
	state: sc.MutableFairRouletteState = new sc.MutableFairRouletteState(wasmlib.ScState.proxy());
}

export class ForceResetCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncForceReset);
	}
}

export class ForceResetContext {
	events: sc.FairRouletteEvents = new sc.FairRouletteEvents();
	state: sc.MutableFairRouletteState = new sc.MutableFairRouletteState(wasmlib.ScState.proxy());
}

export class PayWinnersCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncPayWinners);
	}
}

export class PayWinnersContext {
	events: sc.FairRouletteEvents = new sc.FairRouletteEvents();
	state: sc.MutableFairRouletteState = new sc.MutableFairRouletteState(wasmlib.ScState.proxy());
}

export class PlaceBetCall {
	func: wasmlib.ScFunc;
	params: sc.MutablePlaceBetParams = new sc.MutablePlaceBetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncPlaceBet);
	}
}

export class PlaceBetContext {
	events: sc.FairRouletteEvents = new sc.FairRouletteEvents();
	params: sc.ImmutablePlaceBetParams = new sc.ImmutablePlaceBetParams(wasmlib.paramsProxy());
	state: sc.MutableFairRouletteState = new sc.MutableFairRouletteState(wasmlib.ScState.proxy());
}

export class PlayPeriodCall {
	func: wasmlib.ScFunc;
	params: sc.MutablePlayPeriodParams = new sc.MutablePlayPeriodParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncPlayPeriod);
	}
}

export class PlayPeriodContext {
	events: sc.FairRouletteEvents = new sc.FairRouletteEvents();
	params: sc.ImmutablePlayPeriodParams = new sc.ImmutablePlayPeriodParams(wasmlib.paramsProxy());
	state: sc.MutableFairRouletteState = new sc.MutableFairRouletteState(wasmlib.ScState.proxy());
}

export class LastWinningNumberCall {
	func: wasmlib.ScView;
	results: sc.ImmutableLastWinningNumberResults = new sc.ImmutableLastWinningNumberResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewLastWinningNumber);
	}
}

export class LastWinningNumberContext {
	results: sc.MutableLastWinningNumberResults = new sc.MutableLastWinningNumberResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableFairRouletteState = new sc.ImmutableFairRouletteState(wasmlib.ScState.proxy());
}

export class RoundNumberCall {
	func: wasmlib.ScView;
	results: sc.ImmutableRoundNumberResults = new sc.ImmutableRoundNumberResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewRoundNumber);
	}
}

export class RoundNumberContext {
	results: sc.MutableRoundNumberResults = new sc.MutableRoundNumberResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableFairRouletteState = new sc.ImmutableFairRouletteState(wasmlib.ScState.proxy());
}

export class RoundStartedAtCall {
	func: wasmlib.ScView;
	results: sc.ImmutableRoundStartedAtResults = new sc.ImmutableRoundStartedAtResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewRoundStartedAt);
	}
}

export class RoundStartedAtContext {
	results: sc.MutableRoundStartedAtResults = new sc.MutableRoundStartedAtResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableFairRouletteState = new sc.ImmutableFairRouletteState(wasmlib.ScState.proxy());
}

export class RoundStatusCall {
	func: wasmlib.ScView;
	results: sc.ImmutableRoundStatusResults = new sc.ImmutableRoundStatusResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewRoundStatus);
	}
}

export class RoundStatusContext {
	results: sc.MutableRoundStatusResults = new sc.MutableRoundStatusResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableFairRouletteState = new sc.ImmutableFairRouletteState(wasmlib.ScState.proxy());
}

export class ScFuncs {
	static forcePayout(ctx: wasmlib.ScFuncCallContext): ForcePayoutCall {
		return new ForcePayoutCall(ctx);
	}

	static forceReset(ctx: wasmlib.ScFuncCallContext): ForceResetCall {
		return new ForceResetCall(ctx);
	}

	static payWinners(ctx: wasmlib.ScFuncCallContext): PayWinnersCall {
		return new PayWinnersCall(ctx);
	}

	static placeBet(ctx: wasmlib.ScFuncCallContext): PlaceBetCall {
		const f = new PlaceBetCall(ctx);
		f.params = new sc.MutablePlaceBetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static playPeriod(ctx: wasmlib.ScFuncCallContext): PlayPeriodCall {
		const f = new PlayPeriodCall(ctx);
		f.params = new sc.MutablePlayPeriodParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static lastWinningNumber(ctx: wasmlib.ScViewCallContext): LastWinningNumberCall {
		const f = new LastWinningNumberCall(ctx);
		f.results = new sc.ImmutableLastWinningNumberResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static roundNumber(ctx: wasmlib.ScViewCallContext): RoundNumberCall {
		const f = new RoundNumberCall(ctx);
		f.results = new sc.ImmutableRoundNumberResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static roundStartedAt(ctx: wasmlib.ScViewCallContext): RoundStartedAtCall {
		const f = new RoundStartedAtCall(ctx);
		f.results = new sc.ImmutableRoundStartedAtResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static roundStatus(ctx: wasmlib.ScViewCallContext): RoundStatusCall {
		const f = new RoundStatusCall(ctx);
		f.results = new sc.ImmutableRoundStatusResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}
