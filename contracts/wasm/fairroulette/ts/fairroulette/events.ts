// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as wasmtypes from "wasmlib/wasmtypes";

export class FairRouletteEvents {

	bet(
		// address of better
		address: wasmtypes.ScAddress,
		// amount of iotas to bet
		amount: u64,
		// number to bet on
		number: u16,
	): void {
		const evt = new wasmlib.EventEncoder("fairroulette.bet");
		evt.encode(wasmtypes.addressToString(address));
		evt.encode(wasmtypes.uint64ToString(amount));
		evt.encode(wasmtypes.uint16ToString(number));
		evt.emit();
	}

	payout(
		// address of winner
		address: wasmtypes.ScAddress,
		// amount of iotas won
		amount: u64,
	): void {
		const evt = new wasmlib.EventEncoder("fairroulette.payout");
		evt.encode(wasmtypes.addressToString(address));
		evt.encode(wasmtypes.uint64ToString(amount));
		evt.emit();
	}

	round(
		// current betting round number
		number: u32,
	): void {
		const evt = new wasmlib.EventEncoder("fairroulette.round");
		evt.encode(wasmtypes.uint32ToString(number));
		evt.emit();
	}

	start(): void {
		const evt = new wasmlib.EventEncoder("fairroulette.start");
		evt.emit();
	}

	stop(): void {
		const evt = new wasmlib.EventEncoder("fairroulette.stop");
		evt.emit();
	}

	winner(
		// the winning number
		number: u16,
	): void {
		const evt = new wasmlib.EventEncoder("fairroulette.winner");
		evt.encode(wasmtypes.uint16ToString(number));
		evt.emit();
	}
}
