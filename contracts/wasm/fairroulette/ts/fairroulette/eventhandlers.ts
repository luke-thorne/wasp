// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as wasmtypes from "wasmlib/wasmtypes";

const fairRouletteHandlers = new Map<string, (evt: FairRouletteEventHandlers, msg: string[]) => void>([
	["fairroulette.bet", (evt: FairRouletteEventHandlers, msg: string[]) => evt.bet(new EventBet(msg))],
	["fairroulette.payout", (evt: FairRouletteEventHandlers, msg: string[]) => evt.payout(new EventPayout(msg))],
	["fairroulette.round", (evt: FairRouletteEventHandlers, msg: string[]) => evt.round(new EventRound(msg))],
	["fairroulette.start", (evt: FairRouletteEventHandlers, msg: string[]) => evt.start(new EventStart(msg))],
	["fairroulette.stop", (evt: FairRouletteEventHandlers, msg: string[]) => evt.stop(new EventStop(msg))],
	["fairroulette.winner", (evt: FairRouletteEventHandlers, msg: string[]) => evt.winner(new EventWinner(msg))],
]);

export class FairRouletteEventHandlers implements wasmlib.IEventHandler {
/* eslint-disable @typescript-eslint/no-empty-function */
	bet: (evt: EventBet) => void = () => {};
	payout: (evt: EventPayout) => void = () => {};
	round: (evt: EventRound) => void = () => {};
	start: (evt: EventStart) => void = () => {};
	stop: (evt: EventStop) => void = () => {};
	winner: (evt: EventWinner) => void = () => {};
/* eslint-enable @typescript-eslint/no-empty-function */

	public callHandler(topic: string, params: string[]): void {
		const handler = fairRouletteHandlers.get(topic);
		if (handler) {
			handler(this, params);
		}
	}

	public onFairRouletteBet(handler: (evt: EventBet) => void): void {
		this.bet = handler;
	}

	public onFairRoulettePayout(handler: (evt: EventPayout) => void): void {
		this.payout = handler;
	}

	public onFairRouletteRound(handler: (evt: EventRound) => void): void {
		this.round = handler;
	}

	public onFairRouletteStart(handler: (evt: EventStart) => void): void {
		this.start = handler;
	}

	public onFairRouletteStop(handler: (evt: EventStop) => void): void {
		this.stop = handler;
	}

	public onFairRouletteWinner(handler: (evt: EventWinner) => void): void {
		this.winner = handler;
	}
}

export class EventBet {
	public readonly timestamp: u64;
	public readonly address: wasmtypes.ScAddress;
	public readonly amount: u64;
	public readonly number: u16;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.address = wasmtypes.addressFromString(evt.decode());
		this.amount = wasmtypes.uint64FromString(evt.decode());
		this.number = wasmtypes.uint16FromString(evt.decode());
	}
}

export class EventPayout {
	public readonly timestamp: u64;
	public readonly address: wasmtypes.ScAddress;
	public readonly amount: u64;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.address = wasmtypes.addressFromString(evt.decode());
		this.amount = wasmtypes.uint64FromString(evt.decode());
	}
}

export class EventRound {
	public readonly timestamp: u64;
	public readonly number: u32;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.number = wasmtypes.uint32FromString(evt.decode());
	}
}

export class EventStart {
	public readonly timestamp: u64;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
	}
}

export class EventStop {
	public readonly timestamp: u64;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
	}
}

export class EventWinner {
	public readonly timestamp: u64;
	public readonly number: u16;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.number = wasmtypes.uint16FromString(evt.decode());
	}
}
