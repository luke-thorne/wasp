// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package fairroulette

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var fairRouletteHandlers = map[string]func(*FairRouletteEventHandlers, []string){
	"fairroulette.bet":    func(evt *FairRouletteEventHandlers, msg []string) { evt.onFairRouletteBetThunk(msg) },
	"fairroulette.payout": func(evt *FairRouletteEventHandlers, msg []string) { evt.onFairRoulettePayoutThunk(msg) },
	"fairroulette.round":  func(evt *FairRouletteEventHandlers, msg []string) { evt.onFairRouletteRoundThunk(msg) },
	"fairroulette.start":  func(evt *FairRouletteEventHandlers, msg []string) { evt.onFairRouletteStartThunk(msg) },
	"fairroulette.stop":   func(evt *FairRouletteEventHandlers, msg []string) { evt.onFairRouletteStopThunk(msg) },
	"fairroulette.winner": func(evt *FairRouletteEventHandlers, msg []string) { evt.onFairRouletteWinnerThunk(msg) },
}

type FairRouletteEventHandlers struct {
	bet    func(e *EventBet)
	payout func(e *EventPayout)
	round  func(e *EventRound)
	start  func(e *EventStart)
	stop   func(e *EventStop)
	winner func(e *EventWinner)
}

func (h *FairRouletteEventHandlers) CallHandler(topic string, params []string) {
	handler := fairRouletteHandlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *FairRouletteEventHandlers) OnFairRouletteBet(handler func(e *EventBet)) {
	h.bet = handler
}

func (h *FairRouletteEventHandlers) OnFairRoulettePayout(handler func(e *EventPayout)) {
	h.payout = handler
}

func (h *FairRouletteEventHandlers) OnFairRouletteRound(handler func(e *EventRound)) {
	h.round = handler
}

func (h *FairRouletteEventHandlers) OnFairRouletteStart(handler func(e *EventStart)) {
	h.start = handler
}

func (h *FairRouletteEventHandlers) OnFairRouletteStop(handler func(e *EventStop)) {
	h.stop = handler
}

func (h *FairRouletteEventHandlers) OnFairRouletteWinner(handler func(e *EventWinner)) {
	h.winner = handler
}

type EventBet struct {
	Timestamp uint64
	Address   wasmtypes.ScAddress
	Amount    uint64
	Number    uint16
}

func (h *FairRouletteEventHandlers) onFairRouletteBetThunk(msg []string) {
	if h.bet == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventBet{Timestamp: evt.Timestamp()}
	e.Address = wasmtypes.AddressFromString(evt.Decode())
	e.Amount = wasmtypes.Uint64FromString(evt.Decode())
	e.Number = wasmtypes.Uint16FromString(evt.Decode())
	h.bet(e)
}

type EventPayout struct {
	Timestamp uint64
	Address   wasmtypes.ScAddress
	Amount    uint64
}

func (h *FairRouletteEventHandlers) onFairRoulettePayoutThunk(msg []string) {
	if h.payout == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventPayout{Timestamp: evt.Timestamp()}
	e.Address = wasmtypes.AddressFromString(evt.Decode())
	e.Amount = wasmtypes.Uint64FromString(evt.Decode())
	h.payout(e)
}

type EventRound struct {
	Timestamp uint64
	Number    uint32
}

func (h *FairRouletteEventHandlers) onFairRouletteRoundThunk(msg []string) {
	if h.round == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventRound{Timestamp: evt.Timestamp()}
	e.Number = wasmtypes.Uint32FromString(evt.Decode())
	h.round(e)
}

type EventStart struct {
	Timestamp uint64
}

func (h *FairRouletteEventHandlers) onFairRouletteStartThunk(msg []string) {
	if h.start == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventStart{Timestamp: evt.Timestamp()}
	h.start(e)
}

type EventStop struct {
	Timestamp uint64
}

func (h *FairRouletteEventHandlers) onFairRouletteStopThunk(msg []string) {
	if h.stop == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventStop{Timestamp: evt.Timestamp()}
	h.stop(e)
}

type EventWinner struct {
	Timestamp uint64
	Number    uint16
}

func (h *FairRouletteEventHandlers) onFairRouletteWinnerThunk(msg []string) {
	if h.winner == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventWinner{Timestamp: evt.Timestamp()}
	e.Number = wasmtypes.Uint16FromString(evt.Decode())
	h.winner(e)
}
