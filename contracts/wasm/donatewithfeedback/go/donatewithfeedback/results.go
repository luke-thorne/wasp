// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package donatewithfeedback

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type ImmutableDonationResults struct {
	proxy wasmtypes.Proxy
}

// amount donated
func (s ImmutableDonationResults) Amount() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(ResultAmount))
}

// who donated
func (s ImmutableDonationResults) Donator() wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(s.proxy.Root(ResultDonator))
}

// error to be reported to donator if anything goes wrong
func (s ImmutableDonationResults) Error() wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(s.proxy.Root(ResultError))
}

// the feedback for the person donated to
func (s ImmutableDonationResults) Feedback() wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(s.proxy.Root(ResultFeedback))
}

// when the donation took place
func (s ImmutableDonationResults) Timestamp() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(ResultTimestamp))
}

type MutableDonationResults struct {
	proxy wasmtypes.Proxy
}

// amount donated
func (s MutableDonationResults) Amount() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(ResultAmount))
}

// who donated
func (s MutableDonationResults) Donator() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(s.proxy.Root(ResultDonator))
}

// error to be reported to donator if anything goes wrong
func (s MutableDonationResults) Error() wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(s.proxy.Root(ResultError))
}

// the feedback for the person donated to
func (s MutableDonationResults) Feedback() wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(s.proxy.Root(ResultFeedback))
}

// when the donation took place
func (s MutableDonationResults) Timestamp() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(ResultTimestamp))
}

type ImmutableDonationInfoResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableDonationInfoResults) Count() wasmtypes.ScImmutableUint32 {
	return wasmtypes.NewScImmutableUint32(s.proxy.Root(ResultCount))
}

func (s ImmutableDonationInfoResults) MaxDonation() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(ResultMaxDonation))
}

func (s ImmutableDonationInfoResults) TotalDonation() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(ResultTotalDonation))
}

type MutableDonationInfoResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableDonationInfoResults) Count() wasmtypes.ScMutableUint32 {
	return wasmtypes.NewScMutableUint32(s.proxy.Root(ResultCount))
}

func (s MutableDonationInfoResults) MaxDonation() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(ResultMaxDonation))
}

func (s MutableDonationInfoResults) TotalDonation() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(ResultTotalDonation))
}
