// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableDonationResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableDonationResults {
    // amount donated
    pub fn amount(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_AMOUNT))
	}

    // who donated
    pub fn donator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(RESULT_DONATOR))
	}

    // error to be reported to donator if anything goes wrong
    pub fn error(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_ERROR))
	}

    // the feedback for the person donated to
    pub fn feedback(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_FEEDBACK))
	}

    // when the donation took place
    pub fn timestamp(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_TIMESTAMP))
	}
}

#[derive(Clone)]
pub struct MutableDonationResults {
	pub(crate) proxy: Proxy,
}

impl MutableDonationResults {
    // amount donated
    pub fn amount(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_AMOUNT))
	}

    // who donated
    pub fn donator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(RESULT_DONATOR))
	}

    // error to be reported to donator if anything goes wrong
    pub fn error(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_ERROR))
	}

    // the feedback for the person donated to
    pub fn feedback(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_FEEDBACK))
	}

    // when the donation took place
    pub fn timestamp(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_TIMESTAMP))
	}
}

#[derive(Clone)]
pub struct ImmutableDonationInfoResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableDonationInfoResults {
    pub fn count(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_COUNT))
	}

    pub fn max_donation(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_MAX_DONATION))
	}

    pub fn total_donation(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_TOTAL_DONATION))
	}
}

#[derive(Clone)]
pub struct MutableDonationInfoResults {
	pub(crate) proxy: Proxy,
}

impl MutableDonationInfoResults {
    pub fn count(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_COUNT))
	}

    pub fn max_donation(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_MAX_DONATION))
	}

    pub fn total_donation(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_TOTAL_DONATION))
	}
}
