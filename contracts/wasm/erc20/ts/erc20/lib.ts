// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

const exportMap: wasmlib.ScExportMap = {
	names: [
		sc.FuncApprove,
		sc.FuncInit,
		sc.FuncTransfer,
		sc.FuncTransferFrom,
		sc.ViewAllowance,
		sc.ViewBalanceOf,
		sc.ViewTotalSupply,
	],
	funcs: [
		funcApproveThunk,
		funcInitThunk,
		funcTransferThunk,
		funcTransferFromThunk,
	],
	views: [
		viewAllowanceThunk,
		viewBalanceOfThunk,
		viewTotalSupplyThunk,
	],
};

export function on_call(index: i32): void {
	wasmlib.WasmVMHost.connect();
	wasmlib.ScExports.call(index, exportMap);
}

export function on_load(): void {
	wasmlib.WasmVMHost.connect();
	wasmlib.ScExports.export(exportMap);
}

function funcApproveThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc20.funcApprove");
	let f = new sc.ApproveContext();
	ctx.require(f.params.amount().exists(), "missing mandatory amount");
	ctx.require(f.params.delegation().exists(), "missing mandatory delegation");
	sc.funcApprove(ctx, f);
	ctx.log("erc20.funcApprove ok");
}

function funcInitThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc20.funcInit");
	let f = new sc.InitContext();
	ctx.require(f.params.creator().exists(), "missing mandatory creator");
	ctx.require(f.params.supply().exists(), "missing mandatory supply");
	sc.funcInit(ctx, f);
	ctx.log("erc20.funcInit ok");
}

function funcTransferThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc20.funcTransfer");
	let f = new sc.TransferContext();
	ctx.require(f.params.account().exists(), "missing mandatory account");
	ctx.require(f.params.amount().exists(), "missing mandatory amount");
	sc.funcTransfer(ctx, f);
	ctx.log("erc20.funcTransfer ok");
}

function funcTransferFromThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("erc20.funcTransferFrom");
	let f = new sc.TransferFromContext();
	ctx.require(f.params.account().exists(), "missing mandatory account");
	ctx.require(f.params.amount().exists(), "missing mandatory amount");
	ctx.require(f.params.recipient().exists(), "missing mandatory recipient");
	sc.funcTransferFrom(ctx, f);
	ctx.log("erc20.funcTransferFrom ok");
}

function viewAllowanceThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc20.viewAllowance");
	let f = new sc.AllowanceContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableAllowanceResults(results.asProxy());
	ctx.require(f.params.account().exists(), "missing mandatory account");
	ctx.require(f.params.delegation().exists(), "missing mandatory delegation");
	sc.viewAllowance(ctx, f);
	ctx.results(results);
	ctx.log("erc20.viewAllowance ok");
}

function viewBalanceOfThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc20.viewBalanceOf");
	let f = new sc.BalanceOfContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableBalanceOfResults(results.asProxy());
	ctx.require(f.params.account().exists(), "missing mandatory account");
	sc.viewBalanceOf(ctx, f);
	ctx.results(results);
	ctx.log("erc20.viewBalanceOf ok");
}

function viewTotalSupplyThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("erc20.viewTotalSupply");
	let f = new sc.TotalSupplyContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableTotalSupplyResults(results.asProxy());
	sc.viewTotalSupply(ctx, f);
	ctx.results(results);
	ctx.log("erc20.viewTotalSupply ok");
}
