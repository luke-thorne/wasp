// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as wasmtypes from "wasmlib/wasmtypes";

const erc20Handlers = new Map<string, (evt: Erc20EventHandlers, msg: string[]) => void>([
	["erc20.approval", (evt: Erc20EventHandlers, msg: string[]) => evt.approval(new EventApproval(msg))],
	["erc20.transfer", (evt: Erc20EventHandlers, msg: string[]) => evt.transfer(new EventTransfer(msg))],
]);

export class Erc20EventHandlers implements wasmlib.IEventHandler {
/* eslint-disable @typescript-eslint/no-empty-function */
	approval: (evt: EventApproval) => void = () => {};
	transfer: (evt: EventTransfer) => void = () => {};
/* eslint-enable @typescript-eslint/no-empty-function */

	public callHandler(topic: string, params: string[]): void {
		const handler = erc20Handlers.get(topic);
		if (handler) {
			handler(this, params);
		}
	}

	public onErc20Approval(handler: (evt: EventApproval) => void): void {
		this.approval = handler;
	}

	public onErc20Transfer(handler: (evt: EventTransfer) => void): void {
		this.transfer = handler;
	}
}

export class EventApproval {
	public readonly timestamp: u64;
	public readonly amount: u64;
	public readonly owner: wasmtypes.ScAgentID;
	public readonly spender: wasmtypes.ScAgentID;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.amount = wasmtypes.uint64FromString(evt.decode());
		this.owner = wasmtypes.agentIDFromString(evt.decode());
		this.spender = wasmtypes.agentIDFromString(evt.decode());
	}
}

export class EventTransfer {
	public readonly timestamp: u64;
	public readonly amount: u64;
	public readonly from: wasmtypes.ScAgentID;
	public readonly to: wasmtypes.ScAgentID;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.amount = wasmtypes.uint64FromString(evt.decode());
		this.from = wasmtypes.agentIDFromString(evt.decode());
		this.to = wasmtypes.agentIDFromString(evt.decode());
	}
}
