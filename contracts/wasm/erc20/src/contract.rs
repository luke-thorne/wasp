// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use crate::*;

pub struct ApproveCall {
	pub func: ScFunc,
	pub params: MutableApproveParams,
}

pub struct InitCall {
	pub func: ScInitFunc,
	pub params: MutableInitParams,
}

pub struct TransferCall {
	pub func: ScFunc,
	pub params: MutableTransferParams,
}

pub struct TransferFromCall {
	pub func: ScFunc,
	pub params: MutableTransferFromParams,
}

pub struct AllowanceCall {
	pub func: ScView,
	pub params: MutableAllowanceParams,
	pub results: ImmutableAllowanceResults,
}

pub struct BalanceOfCall {
	pub func: ScView,
	pub params: MutableBalanceOfParams,
	pub results: ImmutableBalanceOfResults,
}

pub struct TotalSupplyCall {
	pub func: ScView,
	pub results: ImmutableTotalSupplyResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn approve(_ctx: &dyn ScFuncCallContext) -> ApproveCall {
        let mut f = ApproveCall {
            func: ScFunc::new(HSC_NAME, HFUNC_APPROVE),
            params: MutableApproveParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn init(_ctx: &dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func: ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { proxy: Proxy::nil() },
        };
        ScInitFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn transfer(_ctx: &dyn ScFuncCallContext) -> TransferCall {
        let mut f = TransferCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TRANSFER),
            params: MutableTransferParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn transfer_from(_ctx: &dyn ScFuncCallContext) -> TransferFromCall {
        let mut f = TransferFromCall {
            func: ScFunc::new(HSC_NAME, HFUNC_TRANSFER_FROM),
            params: MutableTransferFromParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn allowance(_ctx: &dyn ScViewCallContext) -> AllowanceCall {
        let mut f = AllowanceCall {
            func: ScView::new(HSC_NAME, HVIEW_ALLOWANCE),
            params: MutableAllowanceParams { proxy: Proxy::nil() },
            results: ImmutableAllowanceResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn balance_of(_ctx: &dyn ScViewCallContext) -> BalanceOfCall {
        let mut f = BalanceOfCall {
            func: ScView::new(HSC_NAME, HVIEW_BALANCE_OF),
            params: MutableBalanceOfParams { proxy: Proxy::nil() },
            results: ImmutableBalanceOfResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn total_supply(_ctx: &dyn ScViewCallContext) -> TotalSupplyCall {
        let mut f = TotalSupplyCall {
            func: ScView::new(HSC_NAME, HVIEW_TOTAL_SUPPLY),
            results: ImmutableTotalSupplyResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
