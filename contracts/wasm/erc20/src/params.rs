// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableApproveParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableApproveParams {
    // allowance value for delegated account
    pub fn amount(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}

    // delegated account
    pub fn delegation(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_DELEGATION))
	}
}

#[derive(Clone)]
pub struct MutableApproveParams {
	pub(crate) proxy: Proxy,
}

impl MutableApproveParams {
    // allowance value for delegated account
    pub fn amount(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}

    // delegated account
    pub fn delegation(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_DELEGATION))
	}
}

#[derive(Clone)]
pub struct ImmutableInitParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    // creator/owner of the initial supply
    pub fn creator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CREATOR))
	}

    // initial token supply
    pub fn supply(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_SUPPLY))
	}
}

#[derive(Clone)]
pub struct MutableInitParams {
	pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    // creator/owner of the initial supply
    pub fn creator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CREATOR))
	}

    // initial token supply
    pub fn supply(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_SUPPLY))
	}
}

#[derive(Clone)]
pub struct ImmutableTransferParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableTransferParams {
    // target account
    pub fn account(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}

    // amount of tokens to transfer
    pub fn amount(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}
}

#[derive(Clone)]
pub struct MutableTransferParams {
	pub(crate) proxy: Proxy,
}

impl MutableTransferParams {
    // target account
    pub fn account(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}

    // amount of tokens to transfer
    pub fn amount(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}
}

#[derive(Clone)]
pub struct ImmutableTransferFromParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableTransferFromParams {
    // sender account
    pub fn account(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}

    // amount of tokens to transfer
    pub fn amount(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}

    // recipient account
    pub fn recipient(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_RECIPIENT))
	}
}

#[derive(Clone)]
pub struct MutableTransferFromParams {
	pub(crate) proxy: Proxy,
}

impl MutableTransferFromParams {
    // sender account
    pub fn account(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}

    // amount of tokens to transfer
    pub fn amount(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_AMOUNT))
	}

    // recipient account
    pub fn recipient(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_RECIPIENT))
	}
}

#[derive(Clone)]
pub struct ImmutableAllowanceParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAllowanceParams {
    // sender account
    pub fn account(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}

    // delegated account
    pub fn delegation(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_DELEGATION))
	}
}

#[derive(Clone)]
pub struct MutableAllowanceParams {
	pub(crate) proxy: Proxy,
}

impl MutableAllowanceParams {
    // sender account
    pub fn account(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}

    // delegated account
    pub fn delegation(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_DELEGATION))
	}
}

#[derive(Clone)]
pub struct ImmutableBalanceOfParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBalanceOfParams {
    // sender account
    pub fn account(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}
}

#[derive(Clone)]
pub struct MutableBalanceOfParams {
	pub(crate) proxy: Proxy,
}

impl MutableBalanceOfParams {
    // sender account
    pub fn account(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_ACCOUNT))
	}
}
