// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package erc20

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var erc20Handlers = map[string]func(*Erc20EventHandlers, []string){
	"erc20.approval": func(evt *Erc20EventHandlers, msg []string) { evt.onErc20ApprovalThunk(msg) },
	"erc20.transfer": func(evt *Erc20EventHandlers, msg []string) { evt.onErc20TransferThunk(msg) },
}

type Erc20EventHandlers struct {
	approval func(e *EventApproval)
	transfer func(e *EventTransfer)
}

func (h *Erc20EventHandlers) CallHandler(topic string, params []string) {
	handler := erc20Handlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *Erc20EventHandlers) OnErc20Approval(handler func(e *EventApproval)) {
	h.approval = handler
}

func (h *Erc20EventHandlers) OnErc20Transfer(handler func(e *EventTransfer)) {
	h.transfer = handler
}

type EventApproval struct {
	Timestamp uint64
	Amount    uint64
	Owner     wasmtypes.ScAgentID
	Spender   wasmtypes.ScAgentID
}

func (h *Erc20EventHandlers) onErc20ApprovalThunk(msg []string) {
	if h.approval == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventApproval{Timestamp: evt.Timestamp()}
	e.Amount = wasmtypes.Uint64FromString(evt.Decode())
	e.Owner = wasmtypes.AgentIDFromString(evt.Decode())
	e.Spender = wasmtypes.AgentIDFromString(evt.Decode())
	h.approval(e)
}

type EventTransfer struct {
	Timestamp uint64
	Amount    uint64
	From      wasmtypes.ScAgentID
	To        wasmtypes.ScAgentID
}

func (h *Erc20EventHandlers) onErc20TransferThunk(msg []string) {
	if h.transfer == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventTransfer{Timestamp: evt.Timestamp()}
	e.Amount = wasmtypes.Uint64FromString(evt.Decode())
	e.From = wasmtypes.AgentIDFromString(evt.Decode())
	e.To = wasmtypes.AgentIDFromString(evt.Decode())
	h.transfer(e)
}
