// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package erc721

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type MapHashToImmutableAgentID struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableAgentID) GetAgentID(key wasmtypes.ScHash) wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(m.proxy.Key(wasmtypes.HashToBytes(key)))
}

type MapAgentIDToImmutableOperators struct {
	proxy wasmtypes.Proxy
}

func (m MapAgentIDToImmutableOperators) GetOperators(key wasmtypes.ScAgentID) ImmutableOperators {
	return ImmutableOperators{proxy: m.proxy.Key(wasmtypes.AgentIDToBytes(key))}
}

type MapAgentIDToImmutableUint64 struct {
	proxy wasmtypes.Proxy
}

func (m MapAgentIDToImmutableUint64) GetUint64(key wasmtypes.ScAgentID) wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(m.proxy.Key(wasmtypes.AgentIDToBytes(key)))
}

type MapHashToImmutableString struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableString) GetString(key wasmtypes.ScHash) wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(m.proxy.Key(wasmtypes.HashToBytes(key)))
}

type ImmutableErc721State struct {
	proxy wasmtypes.Proxy
}

// approved token controller agents
func (s ImmutableErc721State) ApprovedAccounts() MapHashToImmutableAgentID {
	return MapHashToImmutableAgentID{proxy: s.proxy.Root(StateApprovedAccounts)}
}

// approved operators per owner
func (s ImmutableErc721State) ApprovedOperators() MapAgentIDToImmutableOperators {
	return MapAgentIDToImmutableOperators{proxy: s.proxy.Root(StateApprovedOperators)}
}

// number of tokens held by owners
func (s ImmutableErc721State) Balances() MapAgentIDToImmutableUint64 {
	return MapAgentIDToImmutableUint64{proxy: s.proxy.Root(StateBalances)}
}

func (s ImmutableErc721State) Name() wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(s.proxy.Root(StateName))
}

// 1:1 mapping of owners to token IDs
func (s ImmutableErc721State) Owners() MapHashToImmutableAgentID {
	return MapHashToImmutableAgentID{proxy: s.proxy.Root(StateOwners)}
}

func (s ImmutableErc721State) Symbol() wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(s.proxy.Root(StateSymbol))
}

// token uri per token id
func (s ImmutableErc721State) TokenURIs() MapHashToImmutableString {
	return MapHashToImmutableString{proxy: s.proxy.Root(StateTokenURIs)}
}

type MapHashToMutableAgentID struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableAgentID) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableAgentID) GetAgentID(key wasmtypes.ScHash) wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(m.proxy.Key(wasmtypes.HashToBytes(key)))
}

type MapAgentIDToMutableOperators struct {
	proxy wasmtypes.Proxy
}

func (m MapAgentIDToMutableOperators) Clear() {
	m.proxy.ClearMap()
}

func (m MapAgentIDToMutableOperators) GetOperators(key wasmtypes.ScAgentID) MutableOperators {
	return MutableOperators{proxy: m.proxy.Key(wasmtypes.AgentIDToBytes(key))}
}

type MapAgentIDToMutableUint64 struct {
	proxy wasmtypes.Proxy
}

func (m MapAgentIDToMutableUint64) Clear() {
	m.proxy.ClearMap()
}

func (m MapAgentIDToMutableUint64) GetUint64(key wasmtypes.ScAgentID) wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(m.proxy.Key(wasmtypes.AgentIDToBytes(key)))
}

type MapHashToMutableString struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableString) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableString) GetString(key wasmtypes.ScHash) wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(m.proxy.Key(wasmtypes.HashToBytes(key)))
}

type MutableErc721State struct {
	proxy wasmtypes.Proxy
}

func (s MutableErc721State) AsImmutable() ImmutableErc721State {
	return ImmutableErc721State(s)
}

// approved token controller agents
func (s MutableErc721State) ApprovedAccounts() MapHashToMutableAgentID {
	return MapHashToMutableAgentID{proxy: s.proxy.Root(StateApprovedAccounts)}
}

// approved operators per owner
func (s MutableErc721State) ApprovedOperators() MapAgentIDToMutableOperators {
	return MapAgentIDToMutableOperators{proxy: s.proxy.Root(StateApprovedOperators)}
}

// number of tokens held by owners
func (s MutableErc721State) Balances() MapAgentIDToMutableUint64 {
	return MapAgentIDToMutableUint64{proxy: s.proxy.Root(StateBalances)}
}

func (s MutableErc721State) Name() wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(s.proxy.Root(StateName))
}

// 1:1 mapping of owners to token IDs
func (s MutableErc721State) Owners() MapHashToMutableAgentID {
	return MapHashToMutableAgentID{proxy: s.proxy.Root(StateOwners)}
}

func (s MutableErc721State) Symbol() wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(s.proxy.Root(StateSymbol))
}

// token uri per token id
func (s MutableErc721State) TokenURIs() MapHashToMutableString {
	return MapHashToMutableString{proxy: s.proxy.Root(StateTokenURIs)}
}
