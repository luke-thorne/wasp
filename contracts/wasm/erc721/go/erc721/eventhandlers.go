// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package erc721

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var erc721Handlers = map[string]func(*Erc721EventHandlers, []string){
	"erc721.approval":       func(evt *Erc721EventHandlers, msg []string) { evt.onErc721ApprovalThunk(msg) },
	"erc721.approvalForAll": func(evt *Erc721EventHandlers, msg []string) { evt.onErc721ApprovalForAllThunk(msg) },
	"erc721.init":           func(evt *Erc721EventHandlers, msg []string) { evt.onErc721InitThunk(msg) },
	"erc721.mint":           func(evt *Erc721EventHandlers, msg []string) { evt.onErc721MintThunk(msg) },
	"erc721.transfer":       func(evt *Erc721EventHandlers, msg []string) { evt.onErc721TransferThunk(msg) },
}

type Erc721EventHandlers struct {
	approval       func(e *EventApproval)
	approvalForAll func(e *EventApprovalForAll)
	init           func(e *EventInit)
	mint           func(e *EventMint)
	transfer       func(e *EventTransfer)
}

func (h *Erc721EventHandlers) CallHandler(topic string, params []string) {
	handler := erc721Handlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *Erc721EventHandlers) OnErc721Approval(handler func(e *EventApproval)) {
	h.approval = handler
}

func (h *Erc721EventHandlers) OnErc721ApprovalForAll(handler func(e *EventApprovalForAll)) {
	h.approvalForAll = handler
}

func (h *Erc721EventHandlers) OnErc721Init(handler func(e *EventInit)) {
	h.init = handler
}

func (h *Erc721EventHandlers) OnErc721Mint(handler func(e *EventMint)) {
	h.mint = handler
}

func (h *Erc721EventHandlers) OnErc721Transfer(handler func(e *EventTransfer)) {
	h.transfer = handler
}

type EventApproval struct {
	Timestamp uint64
	Approved  wasmtypes.ScAgentID
	Owner     wasmtypes.ScAgentID
	TokenID   wasmtypes.ScHash
}

func (h *Erc721EventHandlers) onErc721ApprovalThunk(msg []string) {
	if h.approval == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventApproval{Timestamp: evt.Timestamp()}
	e.Approved = wasmtypes.AgentIDFromString(evt.Decode())
	e.Owner = wasmtypes.AgentIDFromString(evt.Decode())
	e.TokenID = wasmtypes.HashFromString(evt.Decode())
	h.approval(e)
}

type EventApprovalForAll struct {
	Timestamp uint64
	Approval  bool
	Operator  wasmtypes.ScAgentID
	Owner     wasmtypes.ScAgentID
}

func (h *Erc721EventHandlers) onErc721ApprovalForAllThunk(msg []string) {
	if h.approvalForAll == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventApprovalForAll{Timestamp: evt.Timestamp()}
	e.Approval = wasmtypes.BoolFromString(evt.Decode())
	e.Operator = wasmtypes.AgentIDFromString(evt.Decode())
	e.Owner = wasmtypes.AgentIDFromString(evt.Decode())
	h.approvalForAll(e)
}

type EventInit struct {
	Timestamp uint64
	Name      string
	Symbol    string
}

func (h *Erc721EventHandlers) onErc721InitThunk(msg []string) {
	if h.init == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventInit{Timestamp: evt.Timestamp()}
	e.Name = wasmtypes.StringFromString(evt.Decode())
	e.Symbol = wasmtypes.StringFromString(evt.Decode())
	h.init(e)
}

type EventMint struct {
	Timestamp uint64
	Balance   uint64
	Owner     wasmtypes.ScAgentID
	TokenID   wasmtypes.ScHash
}

func (h *Erc721EventHandlers) onErc721MintThunk(msg []string) {
	if h.mint == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventMint{Timestamp: evt.Timestamp()}
	e.Balance = wasmtypes.Uint64FromString(evt.Decode())
	e.Owner = wasmtypes.AgentIDFromString(evt.Decode())
	e.TokenID = wasmtypes.HashFromString(evt.Decode())
	h.mint(e)
}

type EventTransfer struct {
	Timestamp uint64
	From      wasmtypes.ScAgentID
	To        wasmtypes.ScAgentID
	TokenID   wasmtypes.ScHash
}

func (h *Erc721EventHandlers) onErc721TransferThunk(msg []string) {
	if h.transfer == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventTransfer{Timestamp: evt.Timestamp()}
	e.From = wasmtypes.AgentIDFromString(evt.Decode())
	e.To = wasmtypes.AgentIDFromString(evt.Decode())
	e.TokenID = wasmtypes.HashFromString(evt.Decode())
	h.transfer(e)
}
