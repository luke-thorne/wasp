// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as wasmtypes from "wasmlib/wasmtypes";

const erc721Handlers = new Map<string, (evt: Erc721EventHandlers, msg: string[]) => void>([
	["erc721.approval", (evt: Erc721EventHandlers, msg: string[]) => evt.approval(new EventApproval(msg))],
	["erc721.approvalForAll", (evt: Erc721EventHandlers, msg: string[]) => evt.approvalForAll(new EventApprovalForAll(msg))],
	["erc721.init", (evt: Erc721EventHandlers, msg: string[]) => evt.init(new EventInit(msg))],
	["erc721.mint", (evt: Erc721EventHandlers, msg: string[]) => evt.mint(new EventMint(msg))],
	["erc721.transfer", (evt: Erc721EventHandlers, msg: string[]) => evt.transfer(new EventTransfer(msg))],
]);

export class Erc721EventHandlers implements wasmlib.IEventHandler {
/* eslint-disable @typescript-eslint/no-empty-function */
	approval: (evt: EventApproval) => void = () => {};
	approvalForAll: (evt: EventApprovalForAll) => void = () => {};
	init: (evt: EventInit) => void = () => {};
	mint: (evt: EventMint) => void = () => {};
	transfer: (evt: EventTransfer) => void = () => {};
/* eslint-enable @typescript-eslint/no-empty-function */

	public callHandler(topic: string, params: string[]): void {
		const handler = erc721Handlers.get(topic);
		if (handler) {
			handler(this, params);
		}
	}

	public onErc721Approval(handler: (evt: EventApproval) => void): void {
		this.approval = handler;
	}

	public onErc721ApprovalForAll(handler: (evt: EventApprovalForAll) => void): void {
		this.approvalForAll = handler;
	}

	public onErc721Init(handler: (evt: EventInit) => void): void {
		this.init = handler;
	}

	public onErc721Mint(handler: (evt: EventMint) => void): void {
		this.mint = handler;
	}

	public onErc721Transfer(handler: (evt: EventTransfer) => void): void {
		this.transfer = handler;
	}
}

export class EventApproval {
	public readonly timestamp: u64;
	public readonly approved: wasmtypes.ScAgentID;
	public readonly owner: wasmtypes.ScAgentID;
	public readonly tokenID: wasmtypes.ScHash;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.approved = wasmtypes.agentIDFromString(evt.decode());
		this.owner = wasmtypes.agentIDFromString(evt.decode());
		this.tokenID = wasmtypes.hashFromString(evt.decode());
	}
}

export class EventApprovalForAll {
	public readonly timestamp: u64;
	public readonly approval: bool;
	public readonly operator: wasmtypes.ScAgentID;
	public readonly owner: wasmtypes.ScAgentID;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.approval = wasmtypes.boolFromString(evt.decode());
		this.operator = wasmtypes.agentIDFromString(evt.decode());
		this.owner = wasmtypes.agentIDFromString(evt.decode());
	}
}

export class EventInit {
	public readonly timestamp: u64;
	public readonly name: string;
	public readonly symbol: string;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.name = wasmtypes.stringFromString(evt.decode());
		this.symbol = wasmtypes.stringFromString(evt.decode());
	}
}

export class EventMint {
	public readonly timestamp: u64;
	public readonly balance: u64;
	public readonly owner: wasmtypes.ScAgentID;
	public readonly tokenID: wasmtypes.ScHash;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.balance = wasmtypes.uint64FromString(evt.decode());
		this.owner = wasmtypes.agentIDFromString(evt.decode());
		this.tokenID = wasmtypes.hashFromString(evt.decode());
	}
}

export class EventTransfer {
	public readonly timestamp: u64;
	public readonly from: wasmtypes.ScAgentID;
	public readonly to: wasmtypes.ScAgentID;
	public readonly tokenID: wasmtypes.ScHash;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.from = wasmtypes.agentIDFromString(evt.decode());
		this.to = wasmtypes.agentIDFromString(evt.decode());
		this.tokenID = wasmtypes.hashFromString(evt.decode());
	}
}
