// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct MapHashToImmutableAgentID {
	pub(crate) proxy: Proxy,
}

impl MapHashToImmutableAgentID {
    pub fn get_agent_id(&self, key: &ScHash) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.key(&hash_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToImmutableOperators {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToImmutableOperators {
    pub fn get_operators(&self, key: &ScAgentID) -> ImmutableOperators {
        ImmutableOperators { proxy: self.proxy.key(&agent_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapAgentIDToImmutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToImmutableUint64 {
    pub fn get_uint64(&self, key: &ScAgentID) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapHashToImmutableString {
	pub(crate) proxy: Proxy,
}

impl MapHashToImmutableString {
    pub fn get_string(&self, key: &ScHash) -> ScImmutableString {
        ScImmutableString::new(self.proxy.key(&hash_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ImmutableErc721State {
	pub(crate) proxy: Proxy,
}

impl ImmutableErc721State {
    // approved token controller agents
    pub fn approved_accounts(&self) -> MapHashToImmutableAgentID {
		MapHashToImmutableAgentID { proxy: self.proxy.root(STATE_APPROVED_ACCOUNTS) }
	}

    // approved operators per owner
    pub fn approved_operators(&self) -> MapAgentIDToImmutableOperators {
		MapAgentIDToImmutableOperators { proxy: self.proxy.root(STATE_APPROVED_OPERATORS) }
	}

    // number of tokens held by owners
    pub fn balances(&self) -> MapAgentIDToImmutableUint64 {
		MapAgentIDToImmutableUint64 { proxy: self.proxy.root(STATE_BALANCES) }
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(STATE_NAME))
	}

    // 1:1 mapping of owners to token IDs
    pub fn owners(&self) -> MapHashToImmutableAgentID {
		MapHashToImmutableAgentID { proxy: self.proxy.root(STATE_OWNERS) }
	}

    pub fn symbol(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(STATE_SYMBOL))
	}

    // token uri per token id
    pub fn token_ur_is(&self) -> MapHashToImmutableString {
		MapHashToImmutableString { proxy: self.proxy.root(STATE_TOKEN_UR_IS) }
	}
}

#[derive(Clone)]
pub struct MapHashToMutableAgentID {
	pub(crate) proxy: Proxy,
}

impl MapHashToMutableAgentID {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_agent_id(&self, key: &ScHash) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.key(&hash_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToMutableOperators {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToMutableOperators {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_operators(&self, key: &ScAgentID) -> MutableOperators {
        MutableOperators { proxy: self.proxy.key(&agent_id_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapAgentIDToMutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToMutableUint64 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_uint64(&self, key: &ScAgentID) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapHashToMutableString {
	pub(crate) proxy: Proxy,
}

impl MapHashToMutableString {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_string(&self, key: &ScHash) -> ScMutableString {
        ScMutableString::new(self.proxy.key(&hash_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MutableErc721State {
	pub(crate) proxy: Proxy,
}

impl MutableErc721State {
    pub fn as_immutable(&self) -> ImmutableErc721State {
		ImmutableErc721State { proxy: self.proxy.root("") }
	}

    // approved token controller agents
    pub fn approved_accounts(&self) -> MapHashToMutableAgentID {
		MapHashToMutableAgentID { proxy: self.proxy.root(STATE_APPROVED_ACCOUNTS) }
	}

    // approved operators per owner
    pub fn approved_operators(&self) -> MapAgentIDToMutableOperators {
		MapAgentIDToMutableOperators { proxy: self.proxy.root(STATE_APPROVED_OPERATORS) }
	}

    // number of tokens held by owners
    pub fn balances(&self) -> MapAgentIDToMutableUint64 {
		MapAgentIDToMutableUint64 { proxy: self.proxy.root(STATE_BALANCES) }
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(STATE_NAME))
	}

    // 1:1 mapping of owners to token IDs
    pub fn owners(&self) -> MapHashToMutableAgentID {
		MapHashToMutableAgentID { proxy: self.proxy.root(STATE_OWNERS) }
	}

    pub fn symbol(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(STATE_SYMBOL))
	}

    // token uri per token id
    pub fn token_ur_is(&self) -> MapHashToMutableString {
		MapHashToMutableString { proxy: self.proxy.root(STATE_TOKEN_UR_IS) }
	}
}
