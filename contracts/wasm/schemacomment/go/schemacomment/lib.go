// COPYRIGHT OF A TEST SCHEMA DEFINITION 1
// COPYRIGHT OF A TEST SCHEMA DEFINITION 2

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package schemacomment

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
		FuncTestFunc1,
		ViewTestView1,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
		funcTestFunc1Thunk,
	},
	Views: []wasmlib.ScViewContextFunction{
		viewTestView1Thunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type TestFunc1Context struct {
	Events  SchemaCommentEvents
	Params  ImmutableTestFunc1Params
	Results MutableTestFunc1Results
	State   MutableSchemaCommentState
}

func funcTestFunc1Thunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("schemacomment.funcTestFunc1")
	results := wasmlib.NewScDict()
	f := &TestFunc1Context{
		Params: ImmutableTestFunc1Params{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableTestFunc1Results{
			proxy: results.AsProxy(),
		},
		State: MutableSchemaCommentState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	ctx.Require(f.Params.Value().Exists(), "missing mandatory value")
	funcTestFunc1(ctx, f)
	ctx.Results(results)
	ctx.Log("schemacomment.funcTestFunc1 ok")
}

type TestView1Context struct {
	Params  ImmutableTestView1Params
	Results MutableTestView1Results
	State   ImmutableSchemaCommentState
}

func viewTestView1Thunk(ctx wasmlib.ScViewContext) {
	ctx.Log("schemacomment.viewTestView1")
	results := wasmlib.NewScDict()
	f := &TestView1Context{
		Params: ImmutableTestView1Params{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableTestView1Results{
			proxy: results.AsProxy(),
		},
		State: ImmutableSchemaCommentState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	viewTestView1(ctx, f)
	ctx.Results(results)
	ctx.Log("schemacomment.viewTestView1 ok")
}
