// COPYRIGHT OF A TEST SCHEMA DEFINITION 1
// COPYRIGHT OF A TEST SCHEMA DEFINITION 2

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package schemacomment

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var schemaCommentHandlers = map[string]func(*SchemaCommentEventHandlers, []string){
	"schemacomment.testEvent":         func(evt *SchemaCommentEventHandlers, msg []string) { evt.onSchemaCommentTestEventThunk(msg) },
	"schemacomment.testEventNoParams": func(evt *SchemaCommentEventHandlers, msg []string) { evt.onSchemaCommentTestEventNoParamsThunk(msg) },
}

type SchemaCommentEventHandlers struct {
	testEvent         func(e *EventTestEvent)
	testEventNoParams func(e *EventTestEventNoParams)
}

func (h *SchemaCommentEventHandlers) CallHandler(topic string, params []string) {
	handler := schemaCommentHandlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *SchemaCommentEventHandlers) OnSchemaCommentTestEvent(handler func(e *EventTestEvent)) {
	h.testEvent = handler
}

func (h *SchemaCommentEventHandlers) OnSchemaCommentTestEventNoParams(handler func(e *EventTestEventNoParams)) {
	h.testEventNoParams = handler
}

type EventTestEvent struct {
	Timestamp   uint64
	EventParam1 string
	EventParam2 string
}

func (h *SchemaCommentEventHandlers) onSchemaCommentTestEventThunk(msg []string) {
	if h.testEvent == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventTestEvent{Timestamp: evt.Timestamp()}
	e.EventParam1 = wasmtypes.StringFromString(evt.Decode())
	e.EventParam2 = wasmtypes.StringFromString(evt.Decode())
	h.testEvent(e)
}

type EventTestEventNoParams struct {
	Timestamp uint64
}

func (h *SchemaCommentEventHandlers) onSchemaCommentTestEventNoParamsThunk(msg []string) {
	if h.testEventNoParams == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventTestEventNoParams{Timestamp: evt.Timestamp()}
	h.testEventNoParams(e)
}
