// COPYRIGHT OF A TEST SCHEMA DEFINITION 1
// COPYRIGHT OF A TEST SCHEMA DEFINITION 2

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class TestFunc1Call {
	func: wasmlib.ScFunc;
	params: sc.MutableTestFunc1Params = new sc.MutableTestFunc1Params(wasmlib.ScView.nilProxy);
	results: sc.ImmutableTestFunc1Results = new sc.ImmutableTestFunc1Results(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncTestFunc1);
	}
}

export class TestFunc1Context {
	events: sc.SchemaCommentEvents = new sc.SchemaCommentEvents();
	params: sc.ImmutableTestFunc1Params = new sc.ImmutableTestFunc1Params(wasmlib.paramsProxy());
	results: sc.MutableTestFunc1Results = new sc.MutableTestFunc1Results(wasmlib.ScView.nilProxy);
	state: sc.MutableSchemaCommentState = new sc.MutableSchemaCommentState(wasmlib.ScState.proxy());
}

export class TestView1Call {
	func: wasmlib.ScView;
	params: sc.MutableTestView1Params = new sc.MutableTestView1Params(wasmlib.ScView.nilProxy);
	results: sc.ImmutableTestView1Results = new sc.ImmutableTestView1Results(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewTestView1);
	}
}

export class TestView1Context {
	params: sc.ImmutableTestView1Params = new sc.ImmutableTestView1Params(wasmlib.paramsProxy());
	results: sc.MutableTestView1Results = new sc.MutableTestView1Results(wasmlib.ScView.nilProxy);
	state: sc.ImmutableSchemaCommentState = new sc.ImmutableSchemaCommentState(wasmlib.ScState.proxy());
}

export class ScFuncs {
	// comment for TestFunc1 1
	static testFunc1(ctx: wasmlib.ScFuncCallContext): TestFunc1Call {
		const f = new TestFunc1Call(ctx);
		f.params = new sc.MutableTestFunc1Params(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableTestFunc1Results(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	// comment for TestView1
	static testView1(ctx: wasmlib.ScViewCallContext): TestView1Call {
		const f = new TestView1Call(ctx);
		f.params = new sc.MutableTestView1Params(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableTestView1Results(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}
