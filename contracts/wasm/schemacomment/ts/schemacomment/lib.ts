// COPYRIGHT OF A TEST SCHEMA DEFINITION 1
// COPYRIGHT OF A TEST SCHEMA DEFINITION 2

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

const exportMap: wasmlib.ScExportMap = {
	names: [
		sc.FuncTestFunc1,
		sc.ViewTestView1,
	],
	funcs: [
		funcTestFunc1Thunk,
	],
	views: [
		viewTestView1Thunk,
	],
};

export function on_call(index: i32): void {
	wasmlib.WasmVMHost.connect();
	wasmlib.ScExports.call(index, exportMap);
}

export function on_load(): void {
	wasmlib.WasmVMHost.connect();
	wasmlib.ScExports.export(exportMap);
}

function funcTestFunc1Thunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("schemacomment.funcTestFunc1");
	let f = new sc.TestFunc1Context();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableTestFunc1Results(results.asProxy());
	ctx.require(f.params.name().exists(), "missing mandatory name");
	ctx.require(f.params.value().exists(), "missing mandatory value");
	sc.funcTestFunc1(ctx, f);
	ctx.results(results);
	ctx.log("schemacomment.funcTestFunc1 ok");
}

function viewTestView1Thunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("schemacomment.viewTestView1");
	let f = new sc.TestView1Context();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableTestView1Results(results.asProxy());
	ctx.require(f.params.name().exists(), "missing mandatory name");
	sc.viewTestView1(ctx, f);
	ctx.results(results);
	ctx.log("schemacomment.viewTestView1 ok");
}
