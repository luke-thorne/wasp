// COPYRIGHT OF A TEST SCHEMA DEFINITION 1
// COPYRIGHT OF A TEST SCHEMA DEFINITION 2

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmtypes from "wasmlib/wasmtypes";

// comment for TestStruct1
export class TestStruct1 {
	// comment for x1
	x1 : i32 = 0;
	// comment for y1
	y1 : i32 = 0;

	static fromBytes(buf: u8[]): TestStruct1 {
		const dec = new wasmtypes.WasmDecoder(buf);
		const data = new TestStruct1();
		data.x1 = wasmtypes.int32Decode(dec);
		data.y1 = wasmtypes.int32Decode(dec);
		dec.close();
		return data;
	}

	bytes(): u8[] {
		const enc = new wasmtypes.WasmEncoder();
		wasmtypes.int32Encode(enc, this.x1);
		wasmtypes.int32Encode(enc, this.y1);
		return enc.buf();
	}
}

export class ImmutableTestStruct1 extends wasmtypes.ScProxy {

	exists(): bool {
		return this.proxy.exists();
	}

	value(): TestStruct1 {
		return TestStruct1.fromBytes(this.proxy.get());
	}
}

export class MutableTestStruct1 extends wasmtypes.ScProxy {

	delete(): void {
		this.proxy.delete();
	}

	exists(): bool {
		return this.proxy.exists();
	}

	setValue(value: TestStruct1): void {
		this.proxy.set(value.bytes());
	}

	value(): TestStruct1 {
		return TestStruct1.fromBytes(this.proxy.get());
	}
}

// comment for TestStruct2
export class TestStruct2 {
	// comment for x2
	x2 : i32 = 0;
	// comment for y2
	y2 : i32 = 0;

	static fromBytes(buf: u8[]): TestStruct2 {
		const dec = new wasmtypes.WasmDecoder(buf);
		const data = new TestStruct2();
		data.x2 = wasmtypes.int32Decode(dec);
		data.y2 = wasmtypes.int32Decode(dec);
		dec.close();
		return data;
	}

	bytes(): u8[] {
		const enc = new wasmtypes.WasmEncoder();
		wasmtypes.int32Encode(enc, this.x2);
		wasmtypes.int32Encode(enc, this.y2);
		return enc.buf();
	}
}

export class ImmutableTestStruct2 extends wasmtypes.ScProxy {

	exists(): bool {
		return this.proxy.exists();
	}

	value(): TestStruct2 {
		return TestStruct2.fromBytes(this.proxy.get());
	}
}

export class MutableTestStruct2 extends wasmtypes.ScProxy {

	delete(): void {
		this.proxy.delete();
	}

	exists(): bool {
		return this.proxy.exists();
	}

	setValue(value: TestStruct2): void {
		this.proxy.set(value.bytes());
	}

	value(): TestStruct2 {
		return TestStruct2.fromBytes(this.proxy.get());
	}
}
