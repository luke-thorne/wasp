// COPYRIGHT OF A TEST SCHEMA DEFINITION 1
// COPYRIGHT OF A TEST SCHEMA DEFINITION 2

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableInt64 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableInt64 {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_int64(&self, index: u32) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ImmutableTestFunc1Params {
	pub(crate) proxy: Proxy,
}

impl ImmutableTestFunc1Params {
    // comment for arr
    pub fn arr(&self) -> ArrayOfImmutableInt64 {
		ArrayOfImmutableInt64 { proxy: self.proxy.root(PARAM_ARR) }
	}

    // comment for name
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}

    // comment for value
    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableInt64 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableInt64 {
	pub fn append_int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_int64(&self, index: u32) -> ScMutableInt64 {
        ScMutableInt64::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MutableTestFunc1Params {
	pub(crate) proxy: Proxy,
}

impl MutableTestFunc1Params {
    // comment for arr
    pub fn arr(&self) -> ArrayOfMutableInt64 {
		ArrayOfMutableInt64 { proxy: self.proxy.root(PARAM_ARR) }
	}

    // comment for name
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}

    // comment for value
    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableTestView1Params {
	pub(crate) proxy: Proxy,
}

impl ImmutableTestView1Params {
    // comment for arr
    pub fn arr(&self) -> ArrayOfImmutableInt64 {
		ArrayOfImmutableInt64 { proxy: self.proxy.root(PARAM_ARR) }
	}

    // comment for name
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableTestView1Params {
	pub(crate) proxy: Proxy,
}

impl MutableTestView1Params {
    // comment for arr
    pub fn arr(&self) -> ArrayOfMutableInt64 {
		ArrayOfMutableInt64 { proxy: self.proxy.root(PARAM_ARR) }
	}

    // comment for name
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}
