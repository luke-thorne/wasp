// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressArrayAppendParams {
    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}

    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressArrayAppendParams {
    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}

    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressArrayClearParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressArrayClearParams {
    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressArrayClearParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressArrayClearParams {
    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressArraySetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressArraySetParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}

    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressArraySetParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressArraySetParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}

    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressMapClearParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressMapClearParams {
    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressMapClearParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressMapClearParams {
    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressMapSetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressMapSetParams {
    pub fn key_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}

    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}

    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressMapSetParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressMapSetParams {
    pub fn key_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}

    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}

    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressArrayAppendParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn value_addr(&self) -> ArrayOfImmutableAddress {
		ArrayOfImmutableAddress { proxy: self.proxy.root(PARAM_VALUE_ADDR) }
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressArrayAppendParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn value_addr(&self) -> ArrayOfMutableAddress {
		ArrayOfMutableAddress { proxy: self.proxy.root(PARAM_VALUE_ADDR) }
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressArraySetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressArraySetParams {
    pub fn index0(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}

    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressArraySetParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressArraySetParams {
    pub fn index0(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}

    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressMapSetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressMapSetParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}

    pub fn value_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressMapSetParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressMapSetParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}

    pub fn value_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_VALUE_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringArrayAppendParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn value(&self) -> ArrayOfImmutableString {
		ArrayOfImmutableString { proxy: self.proxy.root(PARAM_VALUE) }
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringArrayAppendParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn value(&self) -> ArrayOfMutableString {
		ArrayOfMutableString { proxy: self.proxy.root(PARAM_VALUE) }
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringArraySetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringArraySetParams {
    pub fn index0(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}

    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringArraySetParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringArraySetParams {
    pub fn index0(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}

    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringMapSetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringMapSetParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_KEY))
	}

    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringMapSetParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringMapSetParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_KEY))
	}

    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct MapStringToImmutableBytes {
	pub(crate) proxy: Proxy,
}

impl MapStringToImmutableBytes {
    pub fn get_bytes(&self, key: &str) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ImmutableParamTypesParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableParamTypesParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn big_int(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_BIG_INT))
	}

    pub fn bool(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_BOOL))
	}

    pub fn bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_BYTES))
	}

    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_HASH))
	}

    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn int16(&self) -> ScImmutableInt16 {
		ScImmutableInt16::new(self.proxy.root(PARAM_INT16))
	}

    pub fn int32(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(PARAM_INT32))
	}

    pub fn int64(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_INT64))
	}

    pub fn int8(&self) -> ScImmutableInt8 {
		ScImmutableInt8::new(self.proxy.root(PARAM_INT8))
	}

    pub fn nft_id(&self) -> ScImmutableNftID {
		ScImmutableNftID::new(self.proxy.root(PARAM_NFT_ID))
	}

    // special hook to be able to pass key/values as raw bytes
    pub fn param(&self) -> MapStringToImmutableBytes {
		MapStringToImmutableBytes { proxy: self.proxy.clone() }
	}

    pub fn request_id(&self) -> ScImmutableRequestID {
		ScImmutableRequestID::new(self.proxy.root(PARAM_REQUEST_ID))
	}

    pub fn string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_STRING))
	}

    pub fn token_id(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_TOKEN_ID))
	}

    pub fn uint16(&self) -> ScImmutableUint16 {
		ScImmutableUint16::new(self.proxy.root(PARAM_UINT16))
	}

    pub fn uint32(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_UINT32))
	}

    pub fn uint64(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_UINT64))
	}

    pub fn uint8(&self) -> ScImmutableUint8 {
		ScImmutableUint8::new(self.proxy.root(PARAM_UINT8))
	}
}

#[derive(Clone)]
pub struct MapStringToMutableBytes {
	pub(crate) proxy: Proxy,
}

impl MapStringToMutableBytes {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bytes(&self, key: &str) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MutableParamTypesParams {
	pub(crate) proxy: Proxy,
}

impl MutableParamTypesParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}

    pub fn big_int(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_BIG_INT))
	}

    pub fn bool(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_BOOL))
	}

    pub fn bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_BYTES))
	}

    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.proxy.root(PARAM_CHAIN_ID))
	}

    pub fn hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_HASH))
	}

    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn int16(&self) -> ScMutableInt16 {
		ScMutableInt16::new(self.proxy.root(PARAM_INT16))
	}

    pub fn int32(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(PARAM_INT32))
	}

    pub fn int64(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_INT64))
	}

    pub fn int8(&self) -> ScMutableInt8 {
		ScMutableInt8::new(self.proxy.root(PARAM_INT8))
	}

    pub fn nft_id(&self) -> ScMutableNftID {
		ScMutableNftID::new(self.proxy.root(PARAM_NFT_ID))
	}

    // special hook to be able to pass key/values as raw bytes
    pub fn param(&self) -> MapStringToMutableBytes {
		MapStringToMutableBytes { proxy: self.proxy.clone() }
	}

    pub fn request_id(&self) -> ScMutableRequestID {
		ScMutableRequestID::new(self.proxy.root(PARAM_REQUEST_ID))
	}

    pub fn string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_STRING))
	}

    pub fn token_id(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_TOKEN_ID))
	}

    pub fn uint16(&self) -> ScMutableUint16 {
		ScMutableUint16::new(self.proxy.root(PARAM_UINT16))
	}

    pub fn uint32(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_UINT32))
	}

    pub fn uint64(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_UINT64))
	}

    pub fn uint8(&self) -> ScMutableUint8 {
		ScMutableUint8::new(self.proxy.root(PARAM_UINT8))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringArrayAppendParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringArrayAppendParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringArrayAppendParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringArrayClearParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringArrayClearParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringArrayClearParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringArrayClearParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringArraySetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringArraySetParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringArraySetParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringArraySetParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringMapClearParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringMapClearParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringMapClearParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringMapClearParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringMapSetParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringMapSetParams {
    pub fn key(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_KEY))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringMapSetParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringMapSetParams {
    pub fn key(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_KEY))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableTriggerEventParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableTriggerEventParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableTriggerEventParams {
	pub(crate) proxy: Proxy,
}

impl MutableTriggerEventParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressArrayLengthParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressArrayLengthParams {
    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressArrayLengthParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressArrayLengthParams {
    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressArrayValueParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressArrayValueParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableAddressMapOfAddressMapValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddressMapOfAddressMapValueParams {
    pub fn key_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}

    pub fn name_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableAddressMapOfAddressMapValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddressMapOfAddressMapValueParams {
    pub fn key_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}

    pub fn name_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_NAME_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressArrayValueParams {
    pub fn index0(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressArrayValueParams {
    pub fn index0(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfAddressMapValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfAddressMapValueParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key_addr(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfAddressMapValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfAddressMapValueParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key_addr(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_KEY_ADDR))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringArrayValueParams {
    pub fn index0(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringArrayValueParams {
    pub fn index0(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX0))
	}

    pub fn index1(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX1))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayOfStringMapValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayOfStringMapValueParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_KEY))
	}
}

#[derive(Clone)]
pub struct MutableArrayOfStringMapValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableArrayOfStringMapValueParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn key(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_KEY))
	}
}

#[derive(Clone)]
pub struct ImmutableBigIntAddParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBigIntAddParams {
    pub fn lhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct MutableBigIntAddParams {
	pub(crate) proxy: Proxy,
}

impl MutableBigIntAddParams {
    pub fn lhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct ImmutableBigIntDivParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBigIntDivParams {
    pub fn lhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct MutableBigIntDivParams {
	pub(crate) proxy: Proxy,
}

impl MutableBigIntDivParams {
    pub fn lhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct ImmutableBigIntModParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBigIntModParams {
    pub fn lhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct MutableBigIntModParams {
	pub(crate) proxy: Proxy,
}

impl MutableBigIntModParams {
    pub fn lhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct ImmutableBigIntMulParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBigIntMulParams {
    pub fn lhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct MutableBigIntMulParams {
	pub(crate) proxy: Proxy,
}

impl MutableBigIntMulParams {
    pub fn lhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct ImmutableBigIntShlParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBigIntShlParams {
    pub fn lhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn shift(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_SHIFT))
	}
}

#[derive(Clone)]
pub struct MutableBigIntShlParams {
	pub(crate) proxy: Proxy,
}

impl MutableBigIntShlParams {
    pub fn lhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn shift(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_SHIFT))
	}
}

#[derive(Clone)]
pub struct ImmutableBigIntShrParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBigIntShrParams {
    pub fn lhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn shift(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_SHIFT))
	}
}

#[derive(Clone)]
pub struct MutableBigIntShrParams {
	pub(crate) proxy: Proxy,
}

impl MutableBigIntShrParams {
    pub fn lhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn shift(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_SHIFT))
	}
}

#[derive(Clone)]
pub struct ImmutableBigIntSubParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBigIntSubParams {
    pub fn lhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct MutableBigIntSubParams {
	pub(crate) proxy: Proxy,
}

impl MutableBigIntSubParams {
    pub fn lhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_LHS))
	}

    pub fn rhs(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_RHS))
	}
}

#[derive(Clone)]
pub struct ImmutableBlockRecordParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBlockRecordParams {
    pub fn block_index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_BLOCK_INDEX))
	}

    pub fn record_index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_RECORD_INDEX))
	}
}

#[derive(Clone)]
pub struct MutableBlockRecordParams {
	pub(crate) proxy: Proxy,
}

impl MutableBlockRecordParams {
    pub fn block_index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_BLOCK_INDEX))
	}

    pub fn record_index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_RECORD_INDEX))
	}
}

#[derive(Clone)]
pub struct ImmutableBlockRecordsParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBlockRecordsParams {
    pub fn block_index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_BLOCK_INDEX))
	}
}

#[derive(Clone)]
pub struct MutableBlockRecordsParams {
	pub(crate) proxy: Proxy,
}

impl MutableBlockRecordsParams {
    pub fn block_index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_BLOCK_INDEX))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckAddressParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckAddressParams {
    pub fn address_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_ADDRESS_BYTES))
	}

    pub fn address_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_ADDRESS_STRING))
	}

    pub fn sc_address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_SC_ADDRESS))
	}
}

#[derive(Clone)]
pub struct MutableCheckAddressParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckAddressParams {
    pub fn address_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_ADDRESS_BYTES))
	}

    pub fn address_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_ADDRESS_STRING))
	}

    pub fn sc_address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_SC_ADDRESS))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckAgentIDParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckAgentIDParams {
    pub fn agent_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_AGENT_BYTES))
	}

    pub fn agent_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_AGENT_STRING))
	}

    pub fn sc_agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_SC_AGENT_ID))
	}
}

#[derive(Clone)]
pub struct MutableCheckAgentIDParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckAgentIDParams {
    pub fn agent_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_AGENT_BYTES))
	}

    pub fn agent_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_AGENT_STRING))
	}

    pub fn sc_agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_SC_AGENT_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckBigIntParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckBigIntParams {
    pub fn big_int_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_BIG_INT_BYTES))
	}

    pub fn big_int_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_BIG_INT_STRING))
	}

    pub fn sc_big_int(&self) -> ScImmutableBigInt {
		ScImmutableBigInt::new(self.proxy.root(PARAM_SC_BIG_INT))
	}
}

#[derive(Clone)]
pub struct MutableCheckBigIntParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckBigIntParams {
    pub fn big_int_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_BIG_INT_BYTES))
	}

    pub fn big_int_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_BIG_INT_STRING))
	}

    pub fn sc_big_int(&self) -> ScMutableBigInt {
		ScMutableBigInt::new(self.proxy.root(PARAM_SC_BIG_INT))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckBytesParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckBytesParams {
    pub fn bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_BYTES))
	}
}

#[derive(Clone)]
pub struct MutableCheckBytesParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckBytesParams {
    pub fn bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_BYTES))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckEthAddressAndAgentIDParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckEthAddressAndAgentIDParams {
    pub fn eth_address(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_ETH_ADDRESS))
	}
}

#[derive(Clone)]
pub struct MutableCheckEthAddressAndAgentIDParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckEthAddressAndAgentIDParams {
    pub fn eth_address(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_ETH_ADDRESS))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckHashParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckHashParams {
    pub fn hash_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_HASH_BYTES))
	}

    pub fn hash_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_HASH_STRING))
	}

    pub fn sc_hash(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_SC_HASH))
	}
}

#[derive(Clone)]
pub struct MutableCheckHashParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckHashParams {
    pub fn hash_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_HASH_BYTES))
	}

    pub fn hash_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_HASH_STRING))
	}

    pub fn sc_hash(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_SC_HASH))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckHnameParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckHnameParams {
    pub fn hname_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_HNAME_BYTES))
	}

    pub fn hname_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_HNAME_STRING))
	}

    pub fn sc_hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_SC_HNAME))
	}
}

#[derive(Clone)]
pub struct MutableCheckHnameParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckHnameParams {
    pub fn hname_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_HNAME_BYTES))
	}

    pub fn hname_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_HNAME_STRING))
	}

    pub fn sc_hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_SC_HNAME))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckNftIDParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckNftIDParams {
    pub fn nft_id_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_NFT_ID_BYTES))
	}

    pub fn nft_id_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NFT_ID_STRING))
	}

    pub fn sc_nft_id(&self) -> ScImmutableNftID {
		ScImmutableNftID::new(self.proxy.root(PARAM_SC_NFT_ID))
	}
}

#[derive(Clone)]
pub struct MutableCheckNftIDParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckNftIDParams {
    pub fn nft_id_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_NFT_ID_BYTES))
	}

    pub fn nft_id_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NFT_ID_STRING))
	}

    pub fn sc_nft_id(&self) -> ScMutableNftID {
		ScMutableNftID::new(self.proxy.root(PARAM_SC_NFT_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckRequestIDParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckRequestIDParams {
    pub fn request_id_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_REQUEST_ID_BYTES))
	}

    pub fn request_id_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_REQUEST_ID_STRING))
	}

    pub fn sc_request_id(&self) -> ScImmutableRequestID {
		ScImmutableRequestID::new(self.proxy.root(PARAM_SC_REQUEST_ID))
	}
}

#[derive(Clone)]
pub struct MutableCheckRequestIDParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckRequestIDParams {
    pub fn request_id_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_REQUEST_ID_BYTES))
	}

    pub fn request_id_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_REQUEST_ID_STRING))
	}

    pub fn sc_request_id(&self) -> ScMutableRequestID {
		ScMutableRequestID::new(self.proxy.root(PARAM_SC_REQUEST_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckStringParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckStringParams {
    pub fn string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_STRING))
	}
}

#[derive(Clone)]
pub struct MutableCheckStringParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckStringParams {
    pub fn string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_STRING))
	}
}

#[derive(Clone)]
pub struct ImmutableCheckTokenIDParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableCheckTokenIDParams {
    pub fn sc_token_id(&self) -> ScImmutableTokenID {
		ScImmutableTokenID::new(self.proxy.root(PARAM_SC_TOKEN_ID))
	}

    pub fn token_id_bytes(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_TOKEN_ID_BYTES))
	}

    pub fn token_id_string(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_TOKEN_ID_STRING))
	}
}

#[derive(Clone)]
pub struct MutableCheckTokenIDParams {
	pub(crate) proxy: Proxy,
}

impl MutableCheckTokenIDParams {
    pub fn sc_token_id(&self) -> ScMutableTokenID {
		ScMutableTokenID::new(self.proxy.root(PARAM_SC_TOKEN_ID))
	}

    pub fn token_id_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_TOKEN_ID_BYTES))
	}

    pub fn token_id_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_TOKEN_ID_STRING))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringArrayLengthParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringArrayLengthParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringArrayLengthParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringArrayLengthParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringArrayValueParams {
    pub fn index(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringArrayValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringArrayValueParams {
    pub fn index(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(PARAM_INDEX))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct ImmutableStringMapOfStringMapValueParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableStringMapOfStringMapValueParams {
    pub fn key(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_KEY))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}
}

#[derive(Clone)]
pub struct MutableStringMapOfStringMapValueParams {
	pub(crate) proxy: Proxy,
}

impl MutableStringMapOfStringMapValueParams {
    pub fn key(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_KEY))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}
}
