// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package testwasmlib

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var testWasmLibHandlers = map[string]func(*TestWasmLibEventHandlers, []string){
	"testwasmlib.test": func(evt *TestWasmLibEventHandlers, msg []string) { evt.onTestWasmLibTestThunk(msg) },
}

type TestWasmLibEventHandlers struct {
	test func(e *EventTest)
}

func (h *TestWasmLibEventHandlers) CallHandler(topic string, params []string) {
	handler := testWasmLibHandlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *TestWasmLibEventHandlers) OnTestWasmLibTest(handler func(e *EventTest)) {
	h.test = handler
}

type EventTest struct {
	Timestamp uint64
	Address   wasmtypes.ScAddress
	Name      string
}

func (h *TestWasmLibEventHandlers) onTestWasmLibTestThunk(msg []string) {
	if h.test == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventTest{Timestamp: evt.Timestamp()}
	e.Address = wasmtypes.AddressFromString(evt.Decode())
	e.Name = wasmtypes.StringFromString(evt.Decode())
	h.test(e)
}
