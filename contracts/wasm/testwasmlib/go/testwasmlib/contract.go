// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package testwasmlib

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type AddressMapOfAddressArrayAppendCall struct {
	Func   *wasmlib.ScFunc
	Params MutableAddressMapOfAddressArrayAppendParams
}

type AddressMapOfAddressArrayClearCall struct {
	Func   *wasmlib.ScFunc
	Params MutableAddressMapOfAddressArrayClearParams
}

type AddressMapOfAddressArraySetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableAddressMapOfAddressArraySetParams
}

type AddressMapOfAddressMapClearCall struct {
	Func   *wasmlib.ScFunc
	Params MutableAddressMapOfAddressMapClearParams
}

type AddressMapOfAddressMapSetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableAddressMapOfAddressMapSetParams
}

type ArrayOfAddressArrayAppendCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayOfAddressArrayAppendParams
}

type ArrayOfAddressArrayClearCall struct {
	Func *wasmlib.ScFunc
}

type ArrayOfAddressArraySetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayOfAddressArraySetParams
}

type ArrayOfAddressMapClearCall struct {
	Func *wasmlib.ScFunc
}

type ArrayOfAddressMapSetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayOfAddressMapSetParams
}

type ArrayOfStringArrayAppendCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayOfStringArrayAppendParams
}

type ArrayOfStringArrayClearCall struct {
	Func *wasmlib.ScFunc
}

type ArrayOfStringArraySetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayOfStringArraySetParams
}

type ArrayOfStringMapClearCall struct {
	Func *wasmlib.ScFunc
}

type ArrayOfStringMapSetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayOfStringMapSetParams
}

type ParamTypesCall struct {
	Func   *wasmlib.ScFunc
	Params MutableParamTypesParams
}

type RandomCall struct {
	Func *wasmlib.ScFunc
}

type StringMapOfStringArrayAppendCall struct {
	Func   *wasmlib.ScFunc
	Params MutableStringMapOfStringArrayAppendParams
}

type StringMapOfStringArrayClearCall struct {
	Func   *wasmlib.ScFunc
	Params MutableStringMapOfStringArrayClearParams
}

type StringMapOfStringArraySetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableStringMapOfStringArraySetParams
}

type StringMapOfStringMapClearCall struct {
	Func   *wasmlib.ScFunc
	Params MutableStringMapOfStringMapClearParams
}

type StringMapOfStringMapSetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableStringMapOfStringMapSetParams
}

type TakeAllowanceCall struct {
	Func *wasmlib.ScFunc
}

type TakeBalanceCall struct {
	Func    *wasmlib.ScFunc
	Results ImmutableTakeBalanceResults
}

type TriggerEventCall struct {
	Func   *wasmlib.ScFunc
	Params MutableTriggerEventParams
}

type AddressMapOfAddressArrayLengthCall struct {
	Func    *wasmlib.ScView
	Params  MutableAddressMapOfAddressArrayLengthParams
	Results ImmutableAddressMapOfAddressArrayLengthResults
}

type AddressMapOfAddressArrayValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableAddressMapOfAddressArrayValueParams
	Results ImmutableAddressMapOfAddressArrayValueResults
}

type AddressMapOfAddressMapValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableAddressMapOfAddressMapValueParams
	Results ImmutableAddressMapOfAddressMapValueResults
}

type ArrayOfAddressArrayLengthCall struct {
	Func    *wasmlib.ScView
	Results ImmutableArrayOfAddressArrayLengthResults
}

type ArrayOfAddressArrayValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayOfAddressArrayValueParams
	Results ImmutableArrayOfAddressArrayValueResults
}

type ArrayOfAddressMapValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayOfAddressMapValueParams
	Results ImmutableArrayOfAddressMapValueResults
}

type ArrayOfStringArrayLengthCall struct {
	Func    *wasmlib.ScView
	Results ImmutableArrayOfStringArrayLengthResults
}

type ArrayOfStringArrayValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayOfStringArrayValueParams
	Results ImmutableArrayOfStringArrayValueResults
}

type ArrayOfStringMapValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayOfStringMapValueParams
	Results ImmutableArrayOfStringMapValueResults
}

type BigIntAddCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntAddParams
	Results ImmutableBigIntAddResults
}

type BigIntDivCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntDivParams
	Results ImmutableBigIntDivResults
}

type BigIntDivModCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntDivModParams
	Results ImmutableBigIntDivModResults
}

type BigIntModCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntModParams
	Results ImmutableBigIntModResults
}

type BigIntMulCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntMulParams
	Results ImmutableBigIntMulResults
}

type BigIntShlCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntShlParams
	Results ImmutableBigIntShlResults
}

type BigIntShrCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntShrParams
	Results ImmutableBigIntShrResults
}

type BigIntSubCall struct {
	Func    *wasmlib.ScView
	Params  MutableBigIntSubParams
	Results ImmutableBigIntSubResults
}

type BlockRecordCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordParams
	Results ImmutableBlockRecordResults
}

type BlockRecordsCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordsParams
	Results ImmutableBlockRecordsResults
}

type CheckAddressCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckAddressParams
}

type CheckAgentIDCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckAgentIDParams
}

type CheckBigIntCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckBigIntParams
}

type CheckBoolCall struct {
	Func *wasmlib.ScView
}

type CheckBytesCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckBytesParams
}

type CheckEthAddressAndAgentIDCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckEthAddressAndAgentIDParams
}

type CheckHashCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckHashParams
}

type CheckHnameCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckHnameParams
}

type CheckIntAndUintCall struct {
	Func *wasmlib.ScView
}

type CheckNftIDCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckNftIDParams
}

type CheckRequestIDCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckRequestIDParams
}

type CheckStringCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckStringParams
}

type CheckTokenIDCall struct {
	Func   *wasmlib.ScView
	Params MutableCheckTokenIDParams
}

type GetRandomCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetRandomResults
}

type IotaBalanceCall struct {
	Func    *wasmlib.ScView
	Results ImmutableIotaBalanceResults
}

type StringMapOfStringArrayLengthCall struct {
	Func    *wasmlib.ScView
	Params  MutableStringMapOfStringArrayLengthParams
	Results ImmutableStringMapOfStringArrayLengthResults
}

type StringMapOfStringArrayValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableStringMapOfStringArrayValueParams
	Results ImmutableStringMapOfStringArrayValueResults
}

type StringMapOfStringMapValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableStringMapOfStringMapValueParams
	Results ImmutableStringMapOfStringMapValueResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) AddressMapOfAddressArrayAppend(ctx wasmlib.ScFuncCallContext) *AddressMapOfAddressArrayAppendCall {
	f := &AddressMapOfAddressArrayAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddressMapOfAddressArrayAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) AddressMapOfAddressArrayClear(ctx wasmlib.ScFuncCallContext) *AddressMapOfAddressArrayClearCall {
	f := &AddressMapOfAddressArrayClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddressMapOfAddressArrayClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) AddressMapOfAddressArraySet(ctx wasmlib.ScFuncCallContext) *AddressMapOfAddressArraySetCall {
	f := &AddressMapOfAddressArraySetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddressMapOfAddressArraySet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) AddressMapOfAddressMapClear(ctx wasmlib.ScFuncCallContext) *AddressMapOfAddressMapClearCall {
	f := &AddressMapOfAddressMapClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddressMapOfAddressMapClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) AddressMapOfAddressMapSet(ctx wasmlib.ScFuncCallContext) *AddressMapOfAddressMapSetCall {
	f := &AddressMapOfAddressMapSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddressMapOfAddressMapSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfAddressArrayAppend(ctx wasmlib.ScFuncCallContext) *ArrayOfAddressArrayAppendCall {
	f := &ArrayOfAddressArrayAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfAddressArrayAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

// Clear all the arrays of the array
func (sc Funcs) ArrayOfAddressArrayClear(ctx wasmlib.ScFuncCallContext) *ArrayOfAddressArrayClearCall {
	return &ArrayOfAddressArrayClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfAddressArrayClear)}
}

func (sc Funcs) ArrayOfAddressArraySet(ctx wasmlib.ScFuncCallContext) *ArrayOfAddressArraySetCall {
	f := &ArrayOfAddressArraySetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfAddressArraySet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfAddressMapClear(ctx wasmlib.ScFuncCallContext) *ArrayOfAddressMapClearCall {
	return &ArrayOfAddressMapClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfAddressMapClear)}
}

func (sc Funcs) ArrayOfAddressMapSet(ctx wasmlib.ScFuncCallContext) *ArrayOfAddressMapSetCall {
	f := &ArrayOfAddressMapSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfAddressMapSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfStringArrayAppend(ctx wasmlib.ScFuncCallContext) *ArrayOfStringArrayAppendCall {
	f := &ArrayOfStringArrayAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfStringArrayAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

// Clear all the arrays of the array
func (sc Funcs) ArrayOfStringArrayClear(ctx wasmlib.ScFuncCallContext) *ArrayOfStringArrayClearCall {
	return &ArrayOfStringArrayClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfStringArrayClear)}
}

func (sc Funcs) ArrayOfStringArraySet(ctx wasmlib.ScFuncCallContext) *ArrayOfStringArraySetCall {
	f := &ArrayOfStringArraySetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfStringArraySet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayOfStringMapClear(ctx wasmlib.ScFuncCallContext) *ArrayOfStringMapClearCall {
	return &ArrayOfStringMapClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfStringMapClear)}
}

func (sc Funcs) ArrayOfStringMapSet(ctx wasmlib.ScFuncCallContext) *ArrayOfStringMapSetCall {
	f := &ArrayOfStringMapSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayOfStringMapSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ParamTypes(ctx wasmlib.ScFuncCallContext) *ParamTypesCall {
	f := &ParamTypesCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncParamTypes)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Random(ctx wasmlib.ScFuncCallContext) *RandomCall {
	return &RandomCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncRandom)}
}

func (sc Funcs) StringMapOfStringArrayAppend(ctx wasmlib.ScFuncCallContext) *StringMapOfStringArrayAppendCall {
	f := &StringMapOfStringArrayAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncStringMapOfStringArrayAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) StringMapOfStringArrayClear(ctx wasmlib.ScFuncCallContext) *StringMapOfStringArrayClearCall {
	f := &StringMapOfStringArrayClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncStringMapOfStringArrayClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) StringMapOfStringArraySet(ctx wasmlib.ScFuncCallContext) *StringMapOfStringArraySetCall {
	f := &StringMapOfStringArraySetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncStringMapOfStringArraySet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) StringMapOfStringMapClear(ctx wasmlib.ScFuncCallContext) *StringMapOfStringMapClearCall {
	f := &StringMapOfStringMapClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncStringMapOfStringMapClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) StringMapOfStringMapSet(ctx wasmlib.ScFuncCallContext) *StringMapOfStringMapSetCall {
	f := &StringMapOfStringMapSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncStringMapOfStringMapSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) TakeAllowance(ctx wasmlib.ScFuncCallContext) *TakeAllowanceCall {
	return &TakeAllowanceCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTakeAllowance)}
}

func (sc Funcs) TakeBalance(ctx wasmlib.ScFuncCallContext) *TakeBalanceCall {
	f := &TakeBalanceCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTakeBalance)}
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) TriggerEvent(ctx wasmlib.ScFuncCallContext) *TriggerEventCall {
	f := &TriggerEventCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTriggerEvent)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) AddressMapOfAddressArrayLength(ctx wasmlib.ScViewCallContext) *AddressMapOfAddressArrayLengthCall {
	f := &AddressMapOfAddressArrayLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewAddressMapOfAddressArrayLength)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) AddressMapOfAddressArrayValue(ctx wasmlib.ScViewCallContext) *AddressMapOfAddressArrayValueCall {
	f := &AddressMapOfAddressArrayValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewAddressMapOfAddressArrayValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) AddressMapOfAddressMapValue(ctx wasmlib.ScViewCallContext) *AddressMapOfAddressMapValueCall {
	f := &AddressMapOfAddressMapValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewAddressMapOfAddressMapValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfAddressArrayLength(ctx wasmlib.ScViewCallContext) *ArrayOfAddressArrayLengthCall {
	f := &ArrayOfAddressArrayLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfAddressArrayLength)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfAddressArrayValue(ctx wasmlib.ScViewCallContext) *ArrayOfAddressArrayValueCall {
	f := &ArrayOfAddressArrayValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfAddressArrayValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfAddressMapValue(ctx wasmlib.ScViewCallContext) *ArrayOfAddressMapValueCall {
	f := &ArrayOfAddressMapValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfAddressMapValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfStringArrayLength(ctx wasmlib.ScViewCallContext) *ArrayOfStringArrayLengthCall {
	f := &ArrayOfStringArrayLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfStringArrayLength)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfStringArrayValue(ctx wasmlib.ScViewCallContext) *ArrayOfStringArrayValueCall {
	f := &ArrayOfStringArrayValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfStringArrayValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayOfStringMapValue(ctx wasmlib.ScViewCallContext) *ArrayOfStringMapValueCall {
	f := &ArrayOfStringMapValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayOfStringMapValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntAdd(ctx wasmlib.ScViewCallContext) *BigIntAddCall {
	f := &BigIntAddCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntAdd)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntDiv(ctx wasmlib.ScViewCallContext) *BigIntDivCall {
	f := &BigIntDivCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntDiv)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntDivMod(ctx wasmlib.ScViewCallContext) *BigIntDivModCall {
	f := &BigIntDivModCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntDivMod)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntMod(ctx wasmlib.ScViewCallContext) *BigIntModCall {
	f := &BigIntModCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntMod)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntMul(ctx wasmlib.ScViewCallContext) *BigIntMulCall {
	f := &BigIntMulCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntMul)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntShl(ctx wasmlib.ScViewCallContext) *BigIntShlCall {
	f := &BigIntShlCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntShl)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntShr(ctx wasmlib.ScViewCallContext) *BigIntShrCall {
	f := &BigIntShrCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntShr)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BigIntSub(ctx wasmlib.ScViewCallContext) *BigIntSubCall {
	f := &BigIntSubCall{Func: wasmlib.NewScView(ctx, HScName, HViewBigIntSub)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BlockRecord(ctx wasmlib.ScViewCallContext) *BlockRecordCall {
	f := &BlockRecordCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecord)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BlockRecords(ctx wasmlib.ScViewCallContext) *BlockRecordsCall {
	f := &BlockRecordsCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecords)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) CheckAddress(ctx wasmlib.ScViewCallContext) *CheckAddressCall {
	f := &CheckAddressCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckAddress)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckAgentID(ctx wasmlib.ScViewCallContext) *CheckAgentIDCall {
	f := &CheckAgentIDCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckAgentID)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckBigInt(ctx wasmlib.ScViewCallContext) *CheckBigIntCall {
	f := &CheckBigIntCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckBigInt)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckBool(ctx wasmlib.ScViewCallContext) *CheckBoolCall {
	return &CheckBoolCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckBool)}
}

func (sc Funcs) CheckBytes(ctx wasmlib.ScViewCallContext) *CheckBytesCall {
	f := &CheckBytesCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckBytes)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckEthAddressAndAgentID(ctx wasmlib.ScViewCallContext) *CheckEthAddressAndAgentIDCall {
	f := &CheckEthAddressAndAgentIDCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckEthAddressAndAgentID)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckHash(ctx wasmlib.ScViewCallContext) *CheckHashCall {
	f := &CheckHashCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckHash)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckHname(ctx wasmlib.ScViewCallContext) *CheckHnameCall {
	f := &CheckHnameCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckHname)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckIntAndUint(ctx wasmlib.ScViewCallContext) *CheckIntAndUintCall {
	return &CheckIntAndUintCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckIntAndUint)}
}

func (sc Funcs) CheckNftID(ctx wasmlib.ScViewCallContext) *CheckNftIDCall {
	f := &CheckNftIDCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckNftID)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckRequestID(ctx wasmlib.ScViewCallContext) *CheckRequestIDCall {
	f := &CheckRequestIDCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckRequestID)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckString(ctx wasmlib.ScViewCallContext) *CheckStringCall {
	f := &CheckStringCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckString)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) CheckTokenID(ctx wasmlib.ScViewCallContext) *CheckTokenIDCall {
	f := &CheckTokenIDCall{Func: wasmlib.NewScView(ctx, HScName, HViewCheckTokenID)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	return f
}

func (sc Funcs) GetRandom(ctx wasmlib.ScViewCallContext) *GetRandomCall {
	f := &GetRandomCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetRandom)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) IotaBalance(ctx wasmlib.ScViewCallContext) *IotaBalanceCall {
	f := &IotaBalanceCall{Func: wasmlib.NewScView(ctx, HScName, HViewIotaBalance)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) StringMapOfStringArrayLength(ctx wasmlib.ScViewCallContext) *StringMapOfStringArrayLengthCall {
	f := &StringMapOfStringArrayLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewStringMapOfStringArrayLength)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) StringMapOfStringArrayValue(ctx wasmlib.ScViewCallContext) *StringMapOfStringArrayValueCall {
	f := &StringMapOfStringArrayValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewStringMapOfStringArrayValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) StringMapOfStringMapValue(ctx wasmlib.ScViewCallContext) *StringMapOfStringMapValueCall {
	f := &StringMapOfStringMapValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewStringMapOfStringMapValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}
