// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class AddressMapOfAddressArrayAppendCall {
	func: wasmlib.ScFunc;
	params: sc.MutableAddressMapOfAddressArrayAppendParams = new sc.MutableAddressMapOfAddressArrayAppendParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAddressMapOfAddressArrayAppend);
	}
}

export class AddressMapOfAddressArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressArrayAppendParams = new sc.ImmutableAddressMapOfAddressArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArrayClearCall {
	func: wasmlib.ScFunc;
	params: sc.MutableAddressMapOfAddressArrayClearParams = new sc.MutableAddressMapOfAddressArrayClearParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAddressMapOfAddressArrayClear);
	}
}

export class AddressMapOfAddressArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressArrayClearParams = new sc.ImmutableAddressMapOfAddressArrayClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArraySetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableAddressMapOfAddressArraySetParams = new sc.MutableAddressMapOfAddressArraySetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAddressMapOfAddressArraySet);
	}
}

export class AddressMapOfAddressArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressArraySetParams = new sc.ImmutableAddressMapOfAddressArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressMapClearCall {
	func: wasmlib.ScFunc;
	params: sc.MutableAddressMapOfAddressMapClearParams = new sc.MutableAddressMapOfAddressMapClearParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAddressMapOfAddressMapClear);
	}
}

export class AddressMapOfAddressMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressMapClearParams = new sc.ImmutableAddressMapOfAddressMapClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressMapSetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableAddressMapOfAddressMapSetParams = new sc.MutableAddressMapOfAddressMapSetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncAddressMapOfAddressMapSet);
	}
}

export class AddressMapOfAddressMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableAddressMapOfAddressMapSetParams = new sc.ImmutableAddressMapOfAddressMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayAppendCall {
	func: wasmlib.ScFunc;
	params: sc.MutableArrayOfAddressArrayAppendParams = new sc.MutableArrayOfAddressArrayAppendParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfAddressArrayAppend);
	}
}

export class ArrayOfAddressArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfAddressArrayAppendParams = new sc.ImmutableArrayOfAddressArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayClearCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfAddressArrayClear);
	}
}

export class ArrayOfAddressArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArraySetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableArrayOfAddressArraySetParams = new sc.MutableArrayOfAddressArraySetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfAddressArraySet);
	}
}

export class ArrayOfAddressArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfAddressArraySetParams = new sc.ImmutableArrayOfAddressArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressMapClearCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfAddressMapClear);
	}
}

export class ArrayOfAddressMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressMapSetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableArrayOfAddressMapSetParams = new sc.MutableArrayOfAddressMapSetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfAddressMapSet);
	}
}

export class ArrayOfAddressMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfAddressMapSetParams = new sc.ImmutableArrayOfAddressMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayAppendCall {
	func: wasmlib.ScFunc;
	params: sc.MutableArrayOfStringArrayAppendParams = new sc.MutableArrayOfStringArrayAppendParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfStringArrayAppend);
	}
}

export class ArrayOfStringArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfStringArrayAppendParams = new sc.ImmutableArrayOfStringArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayClearCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfStringArrayClear);
	}
}

export class ArrayOfStringArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArraySetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableArrayOfStringArraySetParams = new sc.MutableArrayOfStringArraySetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfStringArraySet);
	}
}

export class ArrayOfStringArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfStringArraySetParams = new sc.ImmutableArrayOfStringArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringMapClearCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfStringMapClear);
	}
}

export class ArrayOfStringMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringMapSetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableArrayOfStringMapSetParams = new sc.MutableArrayOfStringMapSetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncArrayOfStringMapSet);
	}
}

export class ArrayOfStringMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableArrayOfStringMapSetParams = new sc.ImmutableArrayOfStringMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ParamTypesCall {
	func: wasmlib.ScFunc;
	params: sc.MutableParamTypesParams = new sc.MutableParamTypesParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncParamTypes);
	}
}

export class ParamTypesContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableParamTypesParams = new sc.ImmutableParamTypesParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class RandomCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncRandom);
	}
}

export class RandomContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayAppendCall {
	func: wasmlib.ScFunc;
	params: sc.MutableStringMapOfStringArrayAppendParams = new sc.MutableStringMapOfStringArrayAppendParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncStringMapOfStringArrayAppend);
	}
}

export class StringMapOfStringArrayAppendContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringArrayAppendParams = new sc.ImmutableStringMapOfStringArrayAppendParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayClearCall {
	func: wasmlib.ScFunc;
	params: sc.MutableStringMapOfStringArrayClearParams = new sc.MutableStringMapOfStringArrayClearParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncStringMapOfStringArrayClear);
	}
}

export class StringMapOfStringArrayClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringArrayClearParams = new sc.ImmutableStringMapOfStringArrayClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArraySetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableStringMapOfStringArraySetParams = new sc.MutableStringMapOfStringArraySetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncStringMapOfStringArraySet);
	}
}

export class StringMapOfStringArraySetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringArraySetParams = new sc.ImmutableStringMapOfStringArraySetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringMapClearCall {
	func: wasmlib.ScFunc;
	params: sc.MutableStringMapOfStringMapClearParams = new sc.MutableStringMapOfStringMapClearParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncStringMapOfStringMapClear);
	}
}

export class StringMapOfStringMapClearContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringMapClearParams = new sc.ImmutableStringMapOfStringMapClearParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringMapSetCall {
	func: wasmlib.ScFunc;
	params: sc.MutableStringMapOfStringMapSetParams = new sc.MutableStringMapOfStringMapSetParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncStringMapOfStringMapSet);
	}
}

export class StringMapOfStringMapSetContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableStringMapOfStringMapSetParams = new sc.ImmutableStringMapOfStringMapSetParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class TakeAllowanceCall {
	func: wasmlib.ScFunc;
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncTakeAllowance);
	}
}

export class TakeAllowanceContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class TakeBalanceCall {
	func: wasmlib.ScFunc;
	results: sc.ImmutableTakeBalanceResults = new sc.ImmutableTakeBalanceResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncTakeBalance);
	}
}

export class TakeBalanceContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	results: sc.MutableTakeBalanceResults = new sc.MutableTakeBalanceResults(wasmlib.ScView.nilProxy);
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class TriggerEventCall {
	func: wasmlib.ScFunc;
	params: sc.MutableTriggerEventParams = new sc.MutableTriggerEventParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScFuncCallContext) {
		this.func = new wasmlib.ScFunc(ctx, sc.HScName, sc.HFuncTriggerEvent);
	}
}

export class TriggerEventContext {
	events: sc.TestWasmLibEvents = new sc.TestWasmLibEvents();
	params: sc.ImmutableTriggerEventParams = new sc.ImmutableTriggerEventParams(wasmlib.paramsProxy());
	state: sc.MutableTestWasmLibState = new sc.MutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArrayLengthCall {
	func: wasmlib.ScView;
	params: sc.MutableAddressMapOfAddressArrayLengthParams = new sc.MutableAddressMapOfAddressArrayLengthParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableAddressMapOfAddressArrayLengthResults = new sc.ImmutableAddressMapOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewAddressMapOfAddressArrayLength);
	}
}

export class AddressMapOfAddressArrayLengthContext {
	params: sc.ImmutableAddressMapOfAddressArrayLengthParams = new sc.ImmutableAddressMapOfAddressArrayLengthParams(wasmlib.paramsProxy());
	results: sc.MutableAddressMapOfAddressArrayLengthResults = new sc.MutableAddressMapOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressArrayValueCall {
	func: wasmlib.ScView;
	params: sc.MutableAddressMapOfAddressArrayValueParams = new sc.MutableAddressMapOfAddressArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableAddressMapOfAddressArrayValueResults = new sc.ImmutableAddressMapOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewAddressMapOfAddressArrayValue);
	}
}

export class AddressMapOfAddressArrayValueContext {
	params: sc.ImmutableAddressMapOfAddressArrayValueParams = new sc.ImmutableAddressMapOfAddressArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableAddressMapOfAddressArrayValueResults = new sc.MutableAddressMapOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class AddressMapOfAddressMapValueCall {
	func: wasmlib.ScView;
	params: sc.MutableAddressMapOfAddressMapValueParams = new sc.MutableAddressMapOfAddressMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableAddressMapOfAddressMapValueResults = new sc.ImmutableAddressMapOfAddressMapValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewAddressMapOfAddressMapValue);
	}
}

export class AddressMapOfAddressMapValueContext {
	params: sc.ImmutableAddressMapOfAddressMapValueParams = new sc.ImmutableAddressMapOfAddressMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableAddressMapOfAddressMapValueResults = new sc.MutableAddressMapOfAddressMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayLengthCall {
	func: wasmlib.ScView;
	results: sc.ImmutableArrayOfAddressArrayLengthResults = new sc.ImmutableArrayOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewArrayOfAddressArrayLength);
	}
}

export class ArrayOfAddressArrayLengthContext {
	results: sc.MutableArrayOfAddressArrayLengthResults = new sc.MutableArrayOfAddressArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressArrayValueCall {
	func: wasmlib.ScView;
	params: sc.MutableArrayOfAddressArrayValueParams = new sc.MutableArrayOfAddressArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfAddressArrayValueResults = new sc.ImmutableArrayOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewArrayOfAddressArrayValue);
	}
}

export class ArrayOfAddressArrayValueContext {
	params: sc.ImmutableArrayOfAddressArrayValueParams = new sc.ImmutableArrayOfAddressArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfAddressArrayValueResults = new sc.MutableArrayOfAddressArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfAddressMapValueCall {
	func: wasmlib.ScView;
	params: sc.MutableArrayOfAddressMapValueParams = new sc.MutableArrayOfAddressMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfAddressMapValueResults = new sc.ImmutableArrayOfAddressMapValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewArrayOfAddressMapValue);
	}
}

export class ArrayOfAddressMapValueContext {
	params: sc.ImmutableArrayOfAddressMapValueParams = new sc.ImmutableArrayOfAddressMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfAddressMapValueResults = new sc.MutableArrayOfAddressMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayLengthCall {
	func: wasmlib.ScView;
	results: sc.ImmutableArrayOfStringArrayLengthResults = new sc.ImmutableArrayOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewArrayOfStringArrayLength);
	}
}

export class ArrayOfStringArrayLengthContext {
	results: sc.MutableArrayOfStringArrayLengthResults = new sc.MutableArrayOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringArrayValueCall {
	func: wasmlib.ScView;
	params: sc.MutableArrayOfStringArrayValueParams = new sc.MutableArrayOfStringArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfStringArrayValueResults = new sc.ImmutableArrayOfStringArrayValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewArrayOfStringArrayValue);
	}
}

export class ArrayOfStringArrayValueContext {
	params: sc.ImmutableArrayOfStringArrayValueParams = new sc.ImmutableArrayOfStringArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfStringArrayValueResults = new sc.MutableArrayOfStringArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ArrayOfStringMapValueCall {
	func: wasmlib.ScView;
	params: sc.MutableArrayOfStringMapValueParams = new sc.MutableArrayOfStringMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableArrayOfStringMapValueResults = new sc.ImmutableArrayOfStringMapValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewArrayOfStringMapValue);
	}
}

export class ArrayOfStringMapValueContext {
	params: sc.ImmutableArrayOfStringMapValueParams = new sc.ImmutableArrayOfStringMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableArrayOfStringMapValueResults = new sc.MutableArrayOfStringMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntAddCall {
	func: wasmlib.ScView;
	params: sc.MutableBigIntAddParams = new sc.MutableBigIntAddParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntAddResults = new sc.ImmutableBigIntAddResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBigIntAdd);
	}
}

export class BigIntAddContext {
	params: sc.ImmutableBigIntAddParams = new sc.ImmutableBigIntAddParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntAddResults = new sc.MutableBigIntAddResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntDivCall {
	func: wasmlib.ScView;
	params: sc.MutableBigIntDivParams = new sc.MutableBigIntDivParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntDivResults = new sc.ImmutableBigIntDivResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBigIntDiv);
	}
}

export class BigIntDivContext {
	params: sc.ImmutableBigIntDivParams = new sc.ImmutableBigIntDivParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntDivResults = new sc.MutableBigIntDivResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntModCall {
	func: wasmlib.ScView;
	params: sc.MutableBigIntModParams = new sc.MutableBigIntModParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntModResults = new sc.ImmutableBigIntModResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBigIntMod);
	}
}

export class BigIntModContext {
	params: sc.ImmutableBigIntModParams = new sc.ImmutableBigIntModParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntModResults = new sc.MutableBigIntModResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntMulCall {
	func: wasmlib.ScView;
	params: sc.MutableBigIntMulParams = new sc.MutableBigIntMulParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntMulResults = new sc.ImmutableBigIntMulResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBigIntMul);
	}
}

export class BigIntMulContext {
	params: sc.ImmutableBigIntMulParams = new sc.ImmutableBigIntMulParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntMulResults = new sc.MutableBigIntMulResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntShlCall {
	func: wasmlib.ScView;
	params: sc.MutableBigIntShlParams = new sc.MutableBigIntShlParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntShlResults = new sc.ImmutableBigIntShlResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBigIntShl);
	}
}

export class BigIntShlContext {
	params: sc.ImmutableBigIntShlParams = new sc.ImmutableBigIntShlParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntShlResults = new sc.MutableBigIntShlResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntShrCall {
	func: wasmlib.ScView;
	params: sc.MutableBigIntShrParams = new sc.MutableBigIntShrParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntShrResults = new sc.ImmutableBigIntShrResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBigIntShr);
	}
}

export class BigIntShrContext {
	params: sc.ImmutableBigIntShrParams = new sc.ImmutableBigIntShrParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntShrResults = new sc.MutableBigIntShrResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BigIntSubCall {
	func: wasmlib.ScView;
	params: sc.MutableBigIntSubParams = new sc.MutableBigIntSubParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBigIntSubResults = new sc.ImmutableBigIntSubResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBigIntSub);
	}
}

export class BigIntSubContext {
	params: sc.ImmutableBigIntSubParams = new sc.ImmutableBigIntSubParams(wasmlib.paramsProxy());
	results: sc.MutableBigIntSubResults = new sc.MutableBigIntSubResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BlockRecordCall {
	func: wasmlib.ScView;
	params: sc.MutableBlockRecordParams = new sc.MutableBlockRecordParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBlockRecordResults = new sc.ImmutableBlockRecordResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBlockRecord);
	}
}

export class BlockRecordContext {
	params: sc.ImmutableBlockRecordParams = new sc.ImmutableBlockRecordParams(wasmlib.paramsProxy());
	results: sc.MutableBlockRecordResults = new sc.MutableBlockRecordResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class BlockRecordsCall {
	func: wasmlib.ScView;
	params: sc.MutableBlockRecordsParams = new sc.MutableBlockRecordsParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableBlockRecordsResults = new sc.ImmutableBlockRecordsResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewBlockRecords);
	}
}

export class BlockRecordsContext {
	params: sc.ImmutableBlockRecordsParams = new sc.ImmutableBlockRecordsParams(wasmlib.paramsProxy());
	results: sc.MutableBlockRecordsResults = new sc.MutableBlockRecordsResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckAddressCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckAddressParams = new sc.MutableCheckAddressParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckAddress);
	}
}

export class CheckAddressContext {
	params: sc.ImmutableCheckAddressParams = new sc.ImmutableCheckAddressParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckAgentIDCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckAgentIDParams = new sc.MutableCheckAgentIDParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckAgentID);
	}
}

export class CheckAgentIDContext {
	params: sc.ImmutableCheckAgentIDParams = new sc.ImmutableCheckAgentIDParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckBigIntCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckBigIntParams = new sc.MutableCheckBigIntParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckBigInt);
	}
}

export class CheckBigIntContext {
	params: sc.ImmutableCheckBigIntParams = new sc.ImmutableCheckBigIntParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckBoolCall {
	func: wasmlib.ScView;
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckBool);
	}
}

export class CheckBoolContext {
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckBytesCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckBytesParams = new sc.MutableCheckBytesParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckBytes);
	}
}

export class CheckBytesContext {
	params: sc.ImmutableCheckBytesParams = new sc.ImmutableCheckBytesParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckEthAddressAndAgentIDCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckEthAddressAndAgentIDParams = new sc.MutableCheckEthAddressAndAgentIDParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckEthAddressAndAgentID);
	}
}

export class CheckEthAddressAndAgentIDContext {
	params: sc.ImmutableCheckEthAddressAndAgentIDParams = new sc.ImmutableCheckEthAddressAndAgentIDParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckHashCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckHashParams = new sc.MutableCheckHashParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckHash);
	}
}

export class CheckHashContext {
	params: sc.ImmutableCheckHashParams = new sc.ImmutableCheckHashParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckHnameCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckHnameParams = new sc.MutableCheckHnameParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckHname);
	}
}

export class CheckHnameContext {
	params: sc.ImmutableCheckHnameParams = new sc.ImmutableCheckHnameParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckIntAndUintCall {
	func: wasmlib.ScView;
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckIntAndUint);
	}
}

export class CheckIntAndUintContext {
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckNftIDCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckNftIDParams = new sc.MutableCheckNftIDParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckNftID);
	}
}

export class CheckNftIDContext {
	params: sc.ImmutableCheckNftIDParams = new sc.ImmutableCheckNftIDParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckRequestIDCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckRequestIDParams = new sc.MutableCheckRequestIDParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckRequestID);
	}
}

export class CheckRequestIDContext {
	params: sc.ImmutableCheckRequestIDParams = new sc.ImmutableCheckRequestIDParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckStringCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckStringParams = new sc.MutableCheckStringParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckString);
	}
}

export class CheckStringContext {
	params: sc.ImmutableCheckStringParams = new sc.ImmutableCheckStringParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class CheckTokenIDCall {
	func: wasmlib.ScView;
	params: sc.MutableCheckTokenIDParams = new sc.MutableCheckTokenIDParams(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewCheckTokenID);
	}
}

export class CheckTokenIDContext {
	params: sc.ImmutableCheckTokenIDParams = new sc.ImmutableCheckTokenIDParams(wasmlib.paramsProxy());
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class GetRandomCall {
	func: wasmlib.ScView;
	results: sc.ImmutableGetRandomResults = new sc.ImmutableGetRandomResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewGetRandom);
	}
}

export class GetRandomContext {
	results: sc.MutableGetRandomResults = new sc.MutableGetRandomResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class IotaBalanceCall {
	func: wasmlib.ScView;
	results: sc.ImmutableIotaBalanceResults = new sc.ImmutableIotaBalanceResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewIotaBalance);
	}
}

export class IotaBalanceContext {
	results: sc.MutableIotaBalanceResults = new sc.MutableIotaBalanceResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayLengthCall {
	func: wasmlib.ScView;
	params: sc.MutableStringMapOfStringArrayLengthParams = new sc.MutableStringMapOfStringArrayLengthParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableStringMapOfStringArrayLengthResults = new sc.ImmutableStringMapOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewStringMapOfStringArrayLength);
	}
}

export class StringMapOfStringArrayLengthContext {
	params: sc.ImmutableStringMapOfStringArrayLengthParams = new sc.ImmutableStringMapOfStringArrayLengthParams(wasmlib.paramsProxy());
	results: sc.MutableStringMapOfStringArrayLengthResults = new sc.MutableStringMapOfStringArrayLengthResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringArrayValueCall {
	func: wasmlib.ScView;
	params: sc.MutableStringMapOfStringArrayValueParams = new sc.MutableStringMapOfStringArrayValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableStringMapOfStringArrayValueResults = new sc.ImmutableStringMapOfStringArrayValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewStringMapOfStringArrayValue);
	}
}

export class StringMapOfStringArrayValueContext {
	params: sc.ImmutableStringMapOfStringArrayValueParams = new sc.ImmutableStringMapOfStringArrayValueParams(wasmlib.paramsProxy());
	results: sc.MutableStringMapOfStringArrayValueResults = new sc.MutableStringMapOfStringArrayValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class StringMapOfStringMapValueCall {
	func: wasmlib.ScView;
	params: sc.MutableStringMapOfStringMapValueParams = new sc.MutableStringMapOfStringMapValueParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableStringMapOfStringMapValueResults = new sc.ImmutableStringMapOfStringMapValueResults(wasmlib.ScView.nilProxy);
	public constructor(ctx: wasmlib.ScViewCallContext) {
		this.func = new wasmlib.ScView(ctx, sc.HScName, sc.HViewStringMapOfStringMapValue);
	}
}

export class StringMapOfStringMapValueContext {
	params: sc.ImmutableStringMapOfStringMapValueParams = new sc.ImmutableStringMapOfStringMapValueParams(wasmlib.paramsProxy());
	results: sc.MutableStringMapOfStringMapValueResults = new sc.MutableStringMapOfStringMapValueResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableTestWasmLibState = new sc.ImmutableTestWasmLibState(wasmlib.ScState.proxy());
}

export class ScFuncs {
	static addressMapOfAddressArrayAppend(ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressArrayAppendCall {
		const f = new AddressMapOfAddressArrayAppendCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArrayClear(ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressArrayClearCall {
		const f = new AddressMapOfAddressArrayClearCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressArrayClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArraySet(ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressArraySetCall {
		const f = new AddressMapOfAddressArraySetCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressMapClear(ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressMapClearCall {
		const f = new AddressMapOfAddressMapClearCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressMapClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressMapSet(ctx: wasmlib.ScFuncCallContext): AddressMapOfAddressMapSetCall {
		const f = new AddressMapOfAddressMapSetCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfAddressArrayAppend(ctx: wasmlib.ScFuncCallContext): ArrayOfAddressArrayAppendCall {
		const f = new ArrayOfAddressArrayAppendCall(ctx);
		f.params = new sc.MutableArrayOfAddressArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	// Clear all the arrays of the array
	static arrayOfAddressArrayClear(ctx: wasmlib.ScFuncCallContext): ArrayOfAddressArrayClearCall {
		return new ArrayOfAddressArrayClearCall(ctx);
	}

	static arrayOfAddressArraySet(ctx: wasmlib.ScFuncCallContext): ArrayOfAddressArraySetCall {
		const f = new ArrayOfAddressArraySetCall(ctx);
		f.params = new sc.MutableArrayOfAddressArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfAddressMapClear(ctx: wasmlib.ScFuncCallContext): ArrayOfAddressMapClearCall {
		return new ArrayOfAddressMapClearCall(ctx);
	}

	static arrayOfAddressMapSet(ctx: wasmlib.ScFuncCallContext): ArrayOfAddressMapSetCall {
		const f = new ArrayOfAddressMapSetCall(ctx);
		f.params = new sc.MutableArrayOfAddressMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfStringArrayAppend(ctx: wasmlib.ScFuncCallContext): ArrayOfStringArrayAppendCall {
		const f = new ArrayOfStringArrayAppendCall(ctx);
		f.params = new sc.MutableArrayOfStringArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	// Clear all the arrays of the array
	static arrayOfStringArrayClear(ctx: wasmlib.ScFuncCallContext): ArrayOfStringArrayClearCall {
		return new ArrayOfStringArrayClearCall(ctx);
	}

	static arrayOfStringArraySet(ctx: wasmlib.ScFuncCallContext): ArrayOfStringArraySetCall {
		const f = new ArrayOfStringArraySetCall(ctx);
		f.params = new sc.MutableArrayOfStringArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static arrayOfStringMapClear(ctx: wasmlib.ScFuncCallContext): ArrayOfStringMapClearCall {
		return new ArrayOfStringMapClearCall(ctx);
	}

	static arrayOfStringMapSet(ctx: wasmlib.ScFuncCallContext): ArrayOfStringMapSetCall {
		const f = new ArrayOfStringMapSetCall(ctx);
		f.params = new sc.MutableArrayOfStringMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static paramTypes(ctx: wasmlib.ScFuncCallContext): ParamTypesCall {
		const f = new ParamTypesCall(ctx);
		f.params = new sc.MutableParamTypesParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static random(ctx: wasmlib.ScFuncCallContext): RandomCall {
		return new RandomCall(ctx);
	}

	static stringMapOfStringArrayAppend(ctx: wasmlib.ScFuncCallContext): StringMapOfStringArrayAppendCall {
		const f = new StringMapOfStringArrayAppendCall(ctx);
		f.params = new sc.MutableStringMapOfStringArrayAppendParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringArrayClear(ctx: wasmlib.ScFuncCallContext): StringMapOfStringArrayClearCall {
		const f = new StringMapOfStringArrayClearCall(ctx);
		f.params = new sc.MutableStringMapOfStringArrayClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringArraySet(ctx: wasmlib.ScFuncCallContext): StringMapOfStringArraySetCall {
		const f = new StringMapOfStringArraySetCall(ctx);
		f.params = new sc.MutableStringMapOfStringArraySetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringMapClear(ctx: wasmlib.ScFuncCallContext): StringMapOfStringMapClearCall {
		const f = new StringMapOfStringMapClearCall(ctx);
		f.params = new sc.MutableStringMapOfStringMapClearParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static stringMapOfStringMapSet(ctx: wasmlib.ScFuncCallContext): StringMapOfStringMapSetCall {
		const f = new StringMapOfStringMapSetCall(ctx);
		f.params = new sc.MutableStringMapOfStringMapSetParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static takeAllowance(ctx: wasmlib.ScFuncCallContext): TakeAllowanceCall {
		return new TakeAllowanceCall(ctx);
	}

	static takeBalance(ctx: wasmlib.ScFuncCallContext): TakeBalanceCall {
		const f = new TakeBalanceCall(ctx);
		f.results = new sc.ImmutableTakeBalanceResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static triggerEvent(ctx: wasmlib.ScFuncCallContext): TriggerEventCall {
		const f = new TriggerEventCall(ctx);
		f.params = new sc.MutableTriggerEventParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArrayLength(ctx: wasmlib.ScViewCallContext): AddressMapOfAddressArrayLengthCall {
		const f = new AddressMapOfAddressArrayLengthCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressArrayLengthParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableAddressMapOfAddressArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static addressMapOfAddressArrayValue(ctx: wasmlib.ScViewCallContext): AddressMapOfAddressArrayValueCall {
		const f = new AddressMapOfAddressArrayValueCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableAddressMapOfAddressArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static addressMapOfAddressMapValue(ctx: wasmlib.ScViewCallContext): AddressMapOfAddressMapValueCall {
		const f = new AddressMapOfAddressMapValueCall(ctx);
		f.params = new sc.MutableAddressMapOfAddressMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableAddressMapOfAddressMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfAddressArrayLength(ctx: wasmlib.ScViewCallContext): ArrayOfAddressArrayLengthCall {
		const f = new ArrayOfAddressArrayLengthCall(ctx);
		f.results = new sc.ImmutableArrayOfAddressArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfAddressArrayValue(ctx: wasmlib.ScViewCallContext): ArrayOfAddressArrayValueCall {
		const f = new ArrayOfAddressArrayValueCall(ctx);
		f.params = new sc.MutableArrayOfAddressArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfAddressArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfAddressMapValue(ctx: wasmlib.ScViewCallContext): ArrayOfAddressMapValueCall {
		const f = new ArrayOfAddressMapValueCall(ctx);
		f.params = new sc.MutableArrayOfAddressMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfAddressMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfStringArrayLength(ctx: wasmlib.ScViewCallContext): ArrayOfStringArrayLengthCall {
		const f = new ArrayOfStringArrayLengthCall(ctx);
		f.results = new sc.ImmutableArrayOfStringArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfStringArrayValue(ctx: wasmlib.ScViewCallContext): ArrayOfStringArrayValueCall {
		const f = new ArrayOfStringArrayValueCall(ctx);
		f.params = new sc.MutableArrayOfStringArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfStringArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static arrayOfStringMapValue(ctx: wasmlib.ScViewCallContext): ArrayOfStringMapValueCall {
		const f = new ArrayOfStringMapValueCall(ctx);
		f.params = new sc.MutableArrayOfStringMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableArrayOfStringMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntAdd(ctx: wasmlib.ScViewCallContext): BigIntAddCall {
		const f = new BigIntAddCall(ctx);
		f.params = new sc.MutableBigIntAddParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntAddResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntDiv(ctx: wasmlib.ScViewCallContext): BigIntDivCall {
		const f = new BigIntDivCall(ctx);
		f.params = new sc.MutableBigIntDivParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntDivResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntMod(ctx: wasmlib.ScViewCallContext): BigIntModCall {
		const f = new BigIntModCall(ctx);
		f.params = new sc.MutableBigIntModParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntModResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntMul(ctx: wasmlib.ScViewCallContext): BigIntMulCall {
		const f = new BigIntMulCall(ctx);
		f.params = new sc.MutableBigIntMulParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntMulResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntShl(ctx: wasmlib.ScViewCallContext): BigIntShlCall {
		const f = new BigIntShlCall(ctx);
		f.params = new sc.MutableBigIntShlParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntShlResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntShr(ctx: wasmlib.ScViewCallContext): BigIntShrCall {
		const f = new BigIntShrCall(ctx);
		f.params = new sc.MutableBigIntShrParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntShrResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static bigIntSub(ctx: wasmlib.ScViewCallContext): BigIntSubCall {
		const f = new BigIntSubCall(ctx);
		f.params = new sc.MutableBigIntSubParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBigIntSubResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static blockRecord(ctx: wasmlib.ScViewCallContext): BlockRecordCall {
		const f = new BlockRecordCall(ctx);
		f.params = new sc.MutableBlockRecordParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBlockRecordResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static blockRecords(ctx: wasmlib.ScViewCallContext): BlockRecordsCall {
		const f = new BlockRecordsCall(ctx);
		f.params = new sc.MutableBlockRecordsParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableBlockRecordsResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static checkAddress(ctx: wasmlib.ScViewCallContext): CheckAddressCall {
		const f = new CheckAddressCall(ctx);
		f.params = new sc.MutableCheckAddressParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkAgentID(ctx: wasmlib.ScViewCallContext): CheckAgentIDCall {
		const f = new CheckAgentIDCall(ctx);
		f.params = new sc.MutableCheckAgentIDParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkBigInt(ctx: wasmlib.ScViewCallContext): CheckBigIntCall {
		const f = new CheckBigIntCall(ctx);
		f.params = new sc.MutableCheckBigIntParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkBool(ctx: wasmlib.ScViewCallContext): CheckBoolCall {
		return new CheckBoolCall(ctx);
	}

	static checkBytes(ctx: wasmlib.ScViewCallContext): CheckBytesCall {
		const f = new CheckBytesCall(ctx);
		f.params = new sc.MutableCheckBytesParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkEthAddressAndAgentID(ctx: wasmlib.ScViewCallContext): CheckEthAddressAndAgentIDCall {
		const f = new CheckEthAddressAndAgentIDCall(ctx);
		f.params = new sc.MutableCheckEthAddressAndAgentIDParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkHash(ctx: wasmlib.ScViewCallContext): CheckHashCall {
		const f = new CheckHashCall(ctx);
		f.params = new sc.MutableCheckHashParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkHname(ctx: wasmlib.ScViewCallContext): CheckHnameCall {
		const f = new CheckHnameCall(ctx);
		f.params = new sc.MutableCheckHnameParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkIntAndUint(ctx: wasmlib.ScViewCallContext): CheckIntAndUintCall {
		return new CheckIntAndUintCall(ctx);
	}

	static checkNftID(ctx: wasmlib.ScViewCallContext): CheckNftIDCall {
		const f = new CheckNftIDCall(ctx);
		f.params = new sc.MutableCheckNftIDParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkRequestID(ctx: wasmlib.ScViewCallContext): CheckRequestIDCall {
		const f = new CheckRequestIDCall(ctx);
		f.params = new sc.MutableCheckRequestIDParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkString(ctx: wasmlib.ScViewCallContext): CheckStringCall {
		const f = new CheckStringCall(ctx);
		f.params = new sc.MutableCheckStringParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static checkTokenID(ctx: wasmlib.ScViewCallContext): CheckTokenIDCall {
		const f = new CheckTokenIDCall(ctx);
		f.params = new sc.MutableCheckTokenIDParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static getRandom(ctx: wasmlib.ScViewCallContext): GetRandomCall {
		const f = new GetRandomCall(ctx);
		f.results = new sc.ImmutableGetRandomResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static iotaBalance(ctx: wasmlib.ScViewCallContext): IotaBalanceCall {
		const f = new IotaBalanceCall(ctx);
		f.results = new sc.ImmutableIotaBalanceResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static stringMapOfStringArrayLength(ctx: wasmlib.ScViewCallContext): StringMapOfStringArrayLengthCall {
		const f = new StringMapOfStringArrayLengthCall(ctx);
		f.params = new sc.MutableStringMapOfStringArrayLengthParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableStringMapOfStringArrayLengthResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static stringMapOfStringArrayValue(ctx: wasmlib.ScViewCallContext): StringMapOfStringArrayValueCall {
		const f = new StringMapOfStringArrayValueCall(ctx);
		f.params = new sc.MutableStringMapOfStringArrayValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableStringMapOfStringArrayValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static stringMapOfStringMapValue(ctx: wasmlib.ScViewCallContext): StringMapOfStringMapValueCall {
		const f = new StringMapOfStringMapValueCall(ctx);
		f.params = new sc.MutableStringMapOfStringMapValueParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableStringMapOfStringMapValueResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}
