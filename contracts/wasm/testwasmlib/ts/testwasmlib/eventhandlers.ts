// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as wasmtypes from "wasmlib/wasmtypes";

const testWasmLibHandlers = new Map<string, (evt: TestWasmLibEventHandlers, msg: string[]) => void>([
	["testwasmlib.test", (evt: TestWasmLibEventHandlers, msg: string[]) => evt.test(new EventTest(msg))],
]);

export class TestWasmLibEventHandlers implements wasmlib.IEventHandler {
/* eslint-disable @typescript-eslint/no-empty-function */
	test: (evt: EventTest) => void = () => {};
/* eslint-enable @typescript-eslint/no-empty-function */

	public callHandler(topic: string, params: string[]): void {
		const handler = testWasmLibHandlers.get(topic);
		if (handler) {
			handler(this, params);
		}
	}

	public onTestWasmLibTest(handler: (evt: EventTest) => void): void {
		this.test = handler;
	}
}

export class EventTest {
	public readonly timestamp: u64;
	public readonly address: wasmtypes.ScAddress;
	public readonly name: string;
	
	public constructor(msg: string[]) {
		const evt = new wasmlib.EventDecoder(msg);
		this.timestamp = evt.timestamp();
		this.address = wasmtypes.addressFromString(evt.decode());
		this.name = wasmtypes.stringFromString(evt.decode());
	}
}
