// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmtypes from "wasmlib/wasmtypes";

export class Location {
	x : i32 = 0;
	y : i32 = 0;

	static fromBytes(buf: u8[]): Location {
		const dec = new wasmtypes.WasmDecoder(buf);
		const data = new Location();
		data.x = wasmtypes.int32Decode(dec);
		data.y = wasmtypes.int32Decode(dec);
		dec.close();
		return data;
	}

	bytes(): u8[] {
		const enc = new wasmtypes.WasmEncoder();
		wasmtypes.int32Encode(enc, this.x);
		wasmtypes.int32Encode(enc, this.y);
		return enc.buf();
	}
}

export class ImmutableLocation extends wasmtypes.ScProxy {

	exists(): bool {
		return this.proxy.exists();
	}

	value(): Location {
		return Location.fromBytes(this.proxy.get());
	}
}

export class MutableLocation extends wasmtypes.ScProxy {

	delete(): void {
		this.proxy.delete();
	}

	exists(): bool {
		return this.proxy.exists();
	}

	setValue(value: Location): void {
		this.proxy.set(value.bytes());
	}

	value(): Location {
		return Location.fromBytes(this.proxy.get());
	}
}
